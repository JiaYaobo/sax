{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Stamox \u00a4 Make Your Statistics Reseatch Faster! Why Another Wheel? \u00a4 What stamox does is really simple, just make it possible, it aims to provide a statistic interface for JAX . But nowadays, we have so many statistic packages around the world varying from languages, for python, statsmodels just works great, for R , tidyverse derived packages are so delicate and easy to use. So why build another wheel ? Three reasons I think: Personal interest, as a student of statistics, I want to learn more about statistics and machine learning, proficient knowledge comes from books but more from practice, write down the code behind the theory is a good way to learn. Speed, JAX is really fast, and Equinox is a good tool to make JAX more convenient, backend of JAX is XLA , which makes it possible to compile the code to GPU or TPU, and it is really fast. Easy of Use, %>% is delicate operation in R , it combines the functions to a pipe and make the code more readable, and stamox is inspired by it, and I want to take a try to make it convenient in python with >> . Speed, at a glance \u00a4 With jit and 'vmap' in JAX , it's easy to write a high performance program than vanilla numpy or R Scipy \u00a4 import scipy.stats as scp_stats import numpy as np x = np . random . uniform ( size = ( 8 , 100000 )) % timeit scp_stats . norm () . cdf ( x ) Stamox \u00a4 from stamox.distribution import pnorm , rnorm import jax.numpy as jnp import jax.random as jrandom key = jrandom . PRNGKey ( 20010813 ) x = rnorm ( key , sample_shape = ( 8 , 100000 )) % timeit jax . block_until_ready ( pnorm ( x )) R \u00a4 library ( rbenchmark ) x = matrix ( runif ( 8 * 100000 ), nrow = 8 ) benchmark ( pnorm ( x ), replications = 100 ) $ elapsed / 100 And the mean elapsed time barplot is as follows: Pipe, link with >> \u00a4 Univariate Functions \u00a4 For univariate functions, stamox provides a decorator make_pipe to make it pipeable, for example: from stamox.core import make_pipe @make_pipe def f ( x ): return x + 1 f ( 1 ) # 2 ( f >> f >> f >> f )( 1 ) # 5 Multi-variables Functions \u00a4 For multi-variables functions, stamox provides a decorator make_partial_pipe to make it pipeable, for example: from stamox.core import make_partial_pipe @make_partial_pipe def g ( x , y ): return x + y # Must use kwargs to define partial part g ( y = 1 )( 1. ) # 2. h = g ( y = 1 ) ( h >> h >> h )( 1. ) # 4. And make_partial_pipe can be used to make a function pipeable with make_pipe : from stamox.core import make_pipe , make_partial_pipe @make_pipe def f ( x ): return x + 1 @make_partial_pipe def g ( x , y ): return x * y h = f >> g ( y = 2 ) h ( 1 ) # 4 In fact, these functions decorated with make_pipe or make_partial_pipe doesn't really return a function class, instead, they will return a Functional class with __call__ method, so it can be used as a function, and it can be used as a pipeable function. And Functional class has a __rshift__ method, so it can be used as a pipeable function. When we define h = f>>g , then h is a Pipe class, which also has a __call__ method, so it can be used as a function, and it can also be used as a pipeable function. And Pipe class has a __rshift__ method, so it can be used as a pipeable function. But next, you may be confused with several conditions below: from statox.core import make_partial_pipe @make_partial_pipe def g ( x , y ): return x * y g ( 1 , 2 ) # 2 g ( 1 , y = 2 ) # 2 g ( x = 1 , y = 2 ) # Functional? g ( x = 1 )( 2 ) # Error! For first two are intended features for stamox , and last two conditions are compatible with functools.partial , for g(x=1, y=2) , where we may expect a value 2 , actually it's still a fucntion until we exectue it, so g(x=1, y=2)() returns 2 , which is similar to partial(g, x=1, y=1)() , and for g(x=1)(2) , it's a error because python isn't smart enough to recogonize that \" oh we have already get x , so 2 refers to y .\", like partial(g, x=1)(2) , which results in the same error, so you will need to use g(x=1, y=2)() or g(x=1)(y=1) instead. So always recommend not to partial first arguments until we provide a more elegant partial wrapper :). Compatibility with JAX and Equinox \u00a4 Just compatible with jit , vmap , grad , pmap and so on, for example: import jax.numpy as jnp from stamox.core import make_pipe from equinox import filter_jit , filter_vmap , filter_grad @make_partial_pipe @filter_jit @filter_vmap @filter_grad def f ( x , y ): return y * x ** 3 f ( y = 3. )( jnp . array ([ 1. , 2. , 3. ])) # [ 9. 36. 81.] Next \u00a4 You've already know everything about stamox , since it's based on JAX and Equinox , I recommend you to get a knowledge of JAX and Equinox first to know more about jit , vmap , grad etc. For more apis, you can refer to Api section. See More \u00a4 JAX Equinox","title":"Hello Stamox"},{"location":"#hello-stamox","text":"Make Your Statistics Reseatch Faster!","title":"Hello Stamox"},{"location":"#why-another-wheel","text":"What stamox does is really simple, just make it possible, it aims to provide a statistic interface for JAX . But nowadays, we have so many statistic packages around the world varying from languages, for python, statsmodels just works great, for R , tidyverse derived packages are so delicate and easy to use. So why build another wheel ? Three reasons I think: Personal interest, as a student of statistics, I want to learn more about statistics and machine learning, proficient knowledge comes from books but more from practice, write down the code behind the theory is a good way to learn. Speed, JAX is really fast, and Equinox is a good tool to make JAX more convenient, backend of JAX is XLA , which makes it possible to compile the code to GPU or TPU, and it is really fast. Easy of Use, %>% is delicate operation in R , it combines the functions to a pipe and make the code more readable, and stamox is inspired by it, and I want to take a try to make it convenient in python with >> .","title":"Why Another Wheel?"},{"location":"#speed-at-a-glance","text":"With jit and 'vmap' in JAX , it's easy to write a high performance program than vanilla numpy or R","title":"Speed, at a glance"},{"location":"#scipy","text":"import scipy.stats as scp_stats import numpy as np x = np . random . uniform ( size = ( 8 , 100000 )) % timeit scp_stats . norm () . cdf ( x )","title":"Scipy"},{"location":"#stamox","text":"from stamox.distribution import pnorm , rnorm import jax.numpy as jnp import jax.random as jrandom key = jrandom . PRNGKey ( 20010813 ) x = rnorm ( key , sample_shape = ( 8 , 100000 )) % timeit jax . block_until_ready ( pnorm ( x ))","title":"Stamox"},{"location":"#r","text":"library ( rbenchmark ) x = matrix ( runif ( 8 * 100000 ), nrow = 8 ) benchmark ( pnorm ( x ), replications = 100 ) $ elapsed / 100 And the mean elapsed time barplot is as follows:","title":"R"},{"location":"#pipe-link-with","text":"","title":"Pipe, link with &gt;&gt;"},{"location":"#univariate-functions","text":"For univariate functions, stamox provides a decorator make_pipe to make it pipeable, for example: from stamox.core import make_pipe @make_pipe def f ( x ): return x + 1 f ( 1 ) # 2 ( f >> f >> f >> f )( 1 ) # 5","title":"Univariate Functions"},{"location":"#multi-variables-functions","text":"For multi-variables functions, stamox provides a decorator make_partial_pipe to make it pipeable, for example: from stamox.core import make_partial_pipe @make_partial_pipe def g ( x , y ): return x + y # Must use kwargs to define partial part g ( y = 1 )( 1. ) # 2. h = g ( y = 1 ) ( h >> h >> h )( 1. ) # 4. And make_partial_pipe can be used to make a function pipeable with make_pipe : from stamox.core import make_pipe , make_partial_pipe @make_pipe def f ( x ): return x + 1 @make_partial_pipe def g ( x , y ): return x * y h = f >> g ( y = 2 ) h ( 1 ) # 4 In fact, these functions decorated with make_pipe or make_partial_pipe doesn't really return a function class, instead, they will return a Functional class with __call__ method, so it can be used as a function, and it can be used as a pipeable function. And Functional class has a __rshift__ method, so it can be used as a pipeable function. When we define h = f>>g , then h is a Pipe class, which also has a __call__ method, so it can be used as a function, and it can also be used as a pipeable function. And Pipe class has a __rshift__ method, so it can be used as a pipeable function. But next, you may be confused with several conditions below: from statox.core import make_partial_pipe @make_partial_pipe def g ( x , y ): return x * y g ( 1 , 2 ) # 2 g ( 1 , y = 2 ) # 2 g ( x = 1 , y = 2 ) # Functional? g ( x = 1 )( 2 ) # Error! For first two are intended features for stamox , and last two conditions are compatible with functools.partial , for g(x=1, y=2) , where we may expect a value 2 , actually it's still a fucntion until we exectue it, so g(x=1, y=2)() returns 2 , which is similar to partial(g, x=1, y=1)() , and for g(x=1)(2) , it's a error because python isn't smart enough to recogonize that \" oh we have already get x , so 2 refers to y .\", like partial(g, x=1)(2) , which results in the same error, so you will need to use g(x=1, y=2)() or g(x=1)(y=1) instead. So always recommend not to partial first arguments until we provide a more elegant partial wrapper :).","title":"Multi-variables Functions"},{"location":"#compatibility-with-jax-and-equinox","text":"Just compatible with jit , vmap , grad , pmap and so on, for example: import jax.numpy as jnp from stamox.core import make_pipe from equinox import filter_jit , filter_vmap , filter_grad @make_partial_pipe @filter_jit @filter_vmap @filter_grad def f ( x , y ): return y * x ** 3 f ( y = 3. )( jnp . array ([ 1. , 2. , 3. ])) # [ 9. 36. 81.]","title":"Compatibility with JAX and Equinox"},{"location":"#next","text":"You've already know everything about stamox , since it's based on JAX and Equinox , I recommend you to get a knowledge of JAX and Equinox first to know more about jit , vmap , grad etc. For more apis, you can refer to Api section.","title":"Next"},{"location":"#see-more","text":"JAX Equinox","title":"See More"},{"location":"examples/","text":"Examples \u00a4 Basic Fucntions \u00a4 import jax.numpy as jnp from stamox.basic import mean , var , std from stamox.core import Pipeable x = jnp . ones (( 3 , 4 )) mean ( x ) # 1.0 var ( x ) # 0.0 std ( x ) # 0.0 # Pipeable f = Pipeable ( x ) >> mean ( axis = 0 ) >> var f () # 0.0 Distributions \u00a4 import jax.random as jrandom from stamox.distribution import pnorm , rnorm , qnorm , dnorm key = jrandom . PRNGKey ( 20010813 ) x = rnorm ( key , sample_shape = ( 8 , 100000 )) cdf = pnorm ( x ) q = qnorm ( cdf ) pdf = dnorm ( q ) Linear Model \u00a4 import jax.numpy as jnp from stamox.regression import lm X = np . random . uniform ( size = ( 1000 , 3 )) y = 3 * X [:, 0 ] + 2 * X [:, 1 ] - 7 * X [:, 2 ] + 1.0 data = pd . DataFrame ( np . concatenate ([ X , y . reshape (( - 1 , 1 ))], axis = 1 ), columns = [ \"x1\" , \"x2\" , \"x3\" , \"y\" ], ) res = lm ( data , \"y ~ x1 + x2 + x3\" ) # or res = ( Pipeable ( data ) >> lm ( \"y ~ x1 + x2 + x3\" ))() KMeans Cluster \u00a4 import jax.numpy as jnp import jax.random as jrandom import pandas as pd from stamox.cluster import kmeans from stamox.core import Pipeable from stamox.distribution import runif key = jrandom . PRNGKey ( 20010813 ) k1 , k2 = jrandom . split ( key ) data = runif ( k1 , sample_shape = ( 1000 , 3 )) res = kmeans ( data , 3 , key = k2 ) # or res = ( Pipeable ( data ) >> kmeans ( n_cluster = 3 , key = k2 ))()","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#basic-fucntions","text":"import jax.numpy as jnp from stamox.basic import mean , var , std from stamox.core import Pipeable x = jnp . ones (( 3 , 4 )) mean ( x ) # 1.0 var ( x ) # 0.0 std ( x ) # 0.0 # Pipeable f = Pipeable ( x ) >> mean ( axis = 0 ) >> var f () # 0.0","title":"Basic Fucntions"},{"location":"examples/#distributions","text":"import jax.random as jrandom from stamox.distribution import pnorm , rnorm , qnorm , dnorm key = jrandom . PRNGKey ( 20010813 ) x = rnorm ( key , sample_shape = ( 8 , 100000 )) cdf = pnorm ( x ) q = qnorm ( cdf ) pdf = dnorm ( q )","title":"Distributions"},{"location":"examples/#linear-model","text":"import jax.numpy as jnp from stamox.regression import lm X = np . random . uniform ( size = ( 1000 , 3 )) y = 3 * X [:, 0 ] + 2 * X [:, 1 ] - 7 * X [:, 2 ] + 1.0 data = pd . DataFrame ( np . concatenate ([ X , y . reshape (( - 1 , 1 ))], axis = 1 ), columns = [ \"x1\" , \"x2\" , \"x3\" , \"y\" ], ) res = lm ( data , \"y ~ x1 + x2 + x3\" ) # or res = ( Pipeable ( data ) >> lm ( \"y ~ x1 + x2 + x3\" ))()","title":"Linear Model"},{"location":"examples/#kmeans-cluster","text":"import jax.numpy as jnp import jax.random as jrandom import pandas as pd from stamox.cluster import kmeans from stamox.core import Pipeable from stamox.distribution import runif key = jrandom . PRNGKey ( 20010813 ) k1 , k2 = jrandom . split ( key ) data = runif ( k1 , sample_shape = ( 1000 , 3 )) res = kmeans ( data , 3 , key = k2 ) # or res = ( Pipeable ( data ) >> kmeans ( n_cluster = 3 , key = k2 ))()","title":"KMeans Cluster"},{"location":"api/basic/basic/","text":"Basic Functions \u00a4 stamox.basic \u00a4 arccos \u00a4 arcsin \u00a4 corrcoef \u00a4 cov \u00a4 cumprod \u00a4 cumsum \u00a4 diff \u00a4 max \u00a4 mean \u00a4 median \u00a4 min \u00a4 prod \u00a4 quantile \u00a4 sd \u00a4 sum \u00a4 var \u00a4 scale ( x : ArrayLike , axis : int = 0 ) -> ArrayLike \u00a4 Calculate standardized x along axis. Parameters: Name Type Description Default x array-like Input array. required axis int Axis along which to calculate mean and standard deviation. Defaults to 0. 0 Returns: Type Description ArrayLike Standardized x along axis.","title":"Basic Functions"},{"location":"api/basic/basic/#basic-functions","text":"","title":"Basic Functions"},{"location":"api/basic/basic/#stamox.basic","text":"","title":"basic"},{"location":"api/cluster/kmeans/","text":"KMeans Cluster \u00a4 Since KMeans Implemented with stamox uses brute force method, it will be slow for large data stamox . cluster . kmeans ( x : ArrayLike , n_cluster : int , restarts : int = 10 , max_iters : int = 100 , dtype : dtype = < class ' jax . numpy . float32 '>, *, key: Union[jax.Array, jax._src.prng.PRNGKeyArray] = None) \u00a4 Runs the K-means clustering algorithm on a given dataset. Parameters: Name Type Description Default x ArrayLike The dataset to be clustered. required n_cluster int The number of clusters to generate. required restarts int The number of restarts for the algorithm. Defaults to 10. 10 max_iters int The maximum number of iterations for the algorithm. Defaults to 100. 100 dtype jnp.dtype The data type of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> key KeyArray A key array used for encryption. Defaults to None. None Returns: Type Description KMeansState An object containing the results of the clustering algorithm. Examples: >>> from jax import random >>> key = random . PRNGKey ( 0 ) >>> x = random . normal ( key , shape = ( 100 , 2 )) >>> state = kmeans ( x , n_cluster = 3 , restarts = 5 , max_iters = 50 , key = key ) >>> state . centers Array ([[ 0.8450022 , - 1.0791471 ], [ - 0.7179966 , 0.6372063 ], [ 0.09818084 , - 0.25906876 ]], dtype = float32 ) stamox.cluster.KMeansState \u00a4 KMeansState class for K-means clustering. Attributes: Name Type Description n_clusters int Number of clusters. centers ArrayLike Centers of the clusters. cluster ArrayLike Cluster labels for each point. iters int Number of iterations. totss float Total sum of squares. betwss float Between sum of squares. withinss float Within sum of squares. tot_withinss float Total within sum of squares.","title":"KMeans Cluster"},{"location":"api/cluster/kmeans/#kmeans-cluster","text":"Since KMeans Implemented with stamox uses brute force method, it will be slow for large data","title":"KMeans Cluster"},{"location":"api/cluster/kmeans/#stamox.cluster.kmeans","text":"Runs the K-means clustering algorithm on a given dataset. Parameters: Name Type Description Default x ArrayLike The dataset to be clustered. required n_cluster int The number of clusters to generate. required restarts int The number of restarts for the algorithm. Defaults to 10. 10 max_iters int The maximum number of iterations for the algorithm. Defaults to 100. 100 dtype jnp.dtype The data type of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> key KeyArray A key array used for encryption. Defaults to None. None Returns: Type Description KMeansState An object containing the results of the clustering algorithm. Examples: >>> from jax import random >>> key = random . PRNGKey ( 0 ) >>> x = random . normal ( key , shape = ( 100 , 2 )) >>> state = kmeans ( x , n_cluster = 3 , restarts = 5 , max_iters = 50 , key = key ) >>> state . centers Array ([[ 0.8450022 , - 1.0791471 ], [ - 0.7179966 , 0.6372063 ], [ 0.09818084 , - 0.25906876 ]], dtype = float32 )","title":"kmeans()"},{"location":"api/cluster/kmeans/#stamox.cluster.KMeansState","text":"KMeansState class for K-means clustering. Attributes: Name Type Description n_clusters int Number of clusters. centers ArrayLike Centers of the clusters. cluster ArrayLike Cluster labels for each point. iters int Number of iterations. totss float Total sum of squares. betwss float Between sum of squares. withinss float Within sum of squares. tot_withinss float Total within sum of squares.","title":"KMeansState"},{"location":"api/correlation/correlations/","text":"Correlations API \u00a4 stamox . correlation . cor ( x : ArrayLike , y : Optional [ ArrayLike ] = None , axis : int = 0 , method : str = 'pearson' , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates correlation between two arrays. Parameters: Name Type Description Default x ArrayLike The first array. required y Optional[ArrayLike] The second array. Defaults to None. None axis int Axis along which the correlation is calculated. Defaults to 0. 0 method str Method used for calculating correlation. Defaults to \"pearson\". 'pearson' dtype jnp.float32 Data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Correlation between two arrays. Exceptions: Type Description NotImplementedError If the specified method is not supported. Examples: >>> import jax.numpy as jnp >>> from stamox.correlation import cor >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> y = jnp . array ([ 5 , 6 , 7 , 8 , 7 ]) >>> cor ( x , y ) Array ( 0.8320503 , dtype = float32 ) stamox . correlation . pearsonr ( x : ArrayLike , y : Optional [ ArrayLike ] = None , axis : int = 0 , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes Pearson correlation coefficient for two arrays. Parameters: Name Type Description Default x ArrayLike An array-like object containing the first set of data. required y Optional[ArrayLike] An optional array-like object containing the second set of data. If not None axis int The axis along which the correlation coefficient should be computed. 0 dtype The data type of the input arrays. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array-like object containing the Pearson correlation coefficient. Examples: >>> import jax.numpy as jnp >>> from stamox.correlation import pearsonr >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> y = jnp . array ([ 5 , 6 , 7 , 8 , 7 ]) >>> pearsonr ( x , y ) Array ( 0.8320503 , dtype = float32 ) stamox . correlation . spearmanr ( x : ArrayLike , y : Optional [ ArrayLike ] = None , axis : int = 0 , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates a Spearman rank-order correlation coefficient and the p-value to test for non-correlation. Parameters: Name Type Description Default x ArrayLike An array of values. required y Optional[ArrayLike] An array of values. Defaults to None. None axis int The axis along which to calculate. Defaults to 0. 0 dtype jnp.float32 The data type of the array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Exceptions: Type Description ValueError If the supplied axis argument is greater than 1 or if the number of dimensions of the array is greater than 2. Returns: Type Description ArrayLike A array-like containing the Spearman rank-order correlation coefficient and the p-value to test for non-correlation. Examples: >>> import jax.numpy as jnp >>> from stamox.correlation import spearmanr >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> y = jnp . array ([ 5 , 6 , 7 , 8 , 7 ]) >>> spearmanr ( x , y ) Array ( 0.8207823038101196 , dtype = float32 )","title":"Correlations API"},{"location":"api/correlation/correlations/#correlations-api","text":"","title":"Correlations API"},{"location":"api/correlation/correlations/#stamox.correlation.cor","text":"Calculates correlation between two arrays. Parameters: Name Type Description Default x ArrayLike The first array. required y Optional[ArrayLike] The second array. Defaults to None. None axis int Axis along which the correlation is calculated. Defaults to 0. 0 method str Method used for calculating correlation. Defaults to \"pearson\". 'pearson' dtype jnp.float32 Data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Correlation between two arrays. Exceptions: Type Description NotImplementedError If the specified method is not supported. Examples: >>> import jax.numpy as jnp >>> from stamox.correlation import cor >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> y = jnp . array ([ 5 , 6 , 7 , 8 , 7 ]) >>> cor ( x , y ) Array ( 0.8320503 , dtype = float32 )","title":"cor()"},{"location":"api/correlation/correlations/#stamox.correlation.pearsonr","text":"Computes Pearson correlation coefficient for two arrays. Parameters: Name Type Description Default x ArrayLike An array-like object containing the first set of data. required y Optional[ArrayLike] An optional array-like object containing the second set of data. If not None axis int The axis along which the correlation coefficient should be computed. 0 dtype The data type of the input arrays. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array-like object containing the Pearson correlation coefficient. Examples: >>> import jax.numpy as jnp >>> from stamox.correlation import pearsonr >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> y = jnp . array ([ 5 , 6 , 7 , 8 , 7 ]) >>> pearsonr ( x , y ) Array ( 0.8320503 , dtype = float32 )","title":"pearsonr()"},{"location":"api/correlation/correlations/#stamox.correlation.spearmanr","text":"Calculates a Spearman rank-order correlation coefficient and the p-value to test for non-correlation. Parameters: Name Type Description Default x ArrayLike An array of values. required y Optional[ArrayLike] An array of values. Defaults to None. None axis int The axis along which to calculate. Defaults to 0. 0 dtype jnp.float32 The data type of the array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Exceptions: Type Description ValueError If the supplied axis argument is greater than 1 or if the number of dimensions of the array is greater than 2. Returns: Type Description ArrayLike A array-like containing the Spearman rank-order correlation coefficient and the p-value to test for non-correlation. Examples: >>> import jax.numpy as jnp >>> from stamox.correlation import spearmanr >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> y = jnp . array ([ 5 , 6 , 7 , 8 , 7 ]) >>> spearmanr ( x , y ) Array ( 0.8207823038101196 , dtype = float32 )","title":"spearmanr()"},{"location":"api/distribution/beta/","text":"Beta Distribution \u00a4 stamox . distribution . pbeta ( q : Union [ Float , ArrayLike ], a : Union [ Float , ArrayLike ], b : Union [ Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the cumulative distribution function of the beta distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] Quantiles. required a Union[Float, ArrayLike] Shape parameter. required b Union[Float, ArrayLike] Shape parameter. required lower_tail bool If True (default), probabilities are P[X \u2264 x], otherwise, P[X > x]. True log_prob bool If True, probabilities are given as log(P). False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability or log of the probability for each quantile. Examples: >>> q = jnp . array ([ 0.1 , 0.5 , 0.9 ]) >>> a = 2.0 >>> b = 3.0 >>> pbeta ( q , a , b ) Array ([ 0.05230004 , 0.68749976 , 0.9963 ], dtype = float32 ) stamox . distribution . qbeta ( p : Union [ Float , ArrayLike ], a : Union [ Float , ArrayLike ], b : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile of beta distribution function. Parameters: Name Type Description Default p Union[Float, ArrayLike] A float or array-like object representing the quantile. required a Union[Float, ArrayLike] A float or array-like object representing the alpha parameter. required b Union[Float, ArrayLike] A float or array-like object representing the beta parameter. required lower_tail bool A boolean indicating whether to compute the lower tail of the True log_prob bool A boolean indicating whether to compute the log probability False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The value of the beta distribution at the given quantile. Examples: >>> qbeta ( 0.5 , 2 , 3 , lower_tail = True , log_prob = False ) Array ([ 0.38572744 ], dtype = float32 ) stamox . distribution . dbeta ( x : Union [ Float , ArrayLike ], a : Union [ Float , ArrayLike ], b : Union [ Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the probability density function of the beta distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] A float or array-like object representing the value(s) at which to evaluate the PDF. required a Union[Float, ArrayLike] A float or array-like object representing the shape parameter of the beta distribution. required b Union[Float, ArrayLike] A float or array-like object representing the scale parameter of the beta distribution. required lower_tail A boolean indicating whether to calculate the lower tail (default True). True log_prob A boolean indicating whether to return the logarithm of the PDF (default False). False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function of the beta distribution evaluated at x. Examples: >>> dbeta ( 0.5 , 2 , 3 , lower_tail = True , log_prob = False ) Array ([ 1.4999996 ], dtype = float32 , weak_type = True ) stamox . distribution . rbeta ( key : Union [ jax . Array , jax . _src . prng . PRNGKeyArray ], sample_shape : Optional [ Sequence [ int ]] = None , a : Union [ Float , ArrayLike ] = None , b : Union [ Float , ArrayLike ] = None , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random numbers from the Beta distribution. Parameters: Name Type Description Default key Union[jax.Array, jax._src.prng.PRNGKeyArray] A PRNGKey used for random number generation. required sample_shape Optional[Sequence[int]] An optional shape for the output samples. None a Union[Float, ArrayLike] The shape parameter of the Beta distribution. Can be either a float or an array-like object. None b Union[Float, ArrayLike] The scale parameter of the Beta distribution. Can be either a float or an array-like object. None lower_tail bool Whether to return the lower tail probability (defaults to True). True log_prob bool Whether to return the log probability (defaults to False). False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random numbers from the Beta distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rbeta ( key , sample_shape = ( 3 ,), a = 2 , b = 3 ) Array ([ 0.02809353 , 0.13760717 , 0.49360353 ], dtype = float32 )","title":"Beta Distribution"},{"location":"api/distribution/beta/#beta-distribution","text":"","title":"Beta Distribution"},{"location":"api/distribution/beta/#stamox.distribution.pbeta","text":"Computes the cumulative distribution function of the beta distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] Quantiles. required a Union[Float, ArrayLike] Shape parameter. required b Union[Float, ArrayLike] Shape parameter. required lower_tail bool If True (default), probabilities are P[X \u2264 x], otherwise, P[X > x]. True log_prob bool If True, probabilities are given as log(P). False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability or log of the probability for each quantile. Examples: >>> q = jnp . array ([ 0.1 , 0.5 , 0.9 ]) >>> a = 2.0 >>> b = 3.0 >>> pbeta ( q , a , b ) Array ([ 0.05230004 , 0.68749976 , 0.9963 ], dtype = float32 )","title":"pbeta()"},{"location":"api/distribution/beta/#stamox.distribution.qbeta","text":"Computes the quantile of beta distribution function. Parameters: Name Type Description Default p Union[Float, ArrayLike] A float or array-like object representing the quantile. required a Union[Float, ArrayLike] A float or array-like object representing the alpha parameter. required b Union[Float, ArrayLike] A float or array-like object representing the beta parameter. required lower_tail bool A boolean indicating whether to compute the lower tail of the True log_prob bool A boolean indicating whether to compute the log probability False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The value of the beta distribution at the given quantile. Examples: >>> qbeta ( 0.5 , 2 , 3 , lower_tail = True , log_prob = False ) Array ([ 0.38572744 ], dtype = float32 )","title":"qbeta()"},{"location":"api/distribution/beta/#stamox.distribution.dbeta","text":"Calculates the probability density function of the beta distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] A float or array-like object representing the value(s) at which to evaluate the PDF. required a Union[Float, ArrayLike] A float or array-like object representing the shape parameter of the beta distribution. required b Union[Float, ArrayLike] A float or array-like object representing the scale parameter of the beta distribution. required lower_tail A boolean indicating whether to calculate the lower tail (default True). True log_prob A boolean indicating whether to return the logarithm of the PDF (default False). False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function of the beta distribution evaluated at x. Examples: >>> dbeta ( 0.5 , 2 , 3 , lower_tail = True , log_prob = False ) Array ([ 1.4999996 ], dtype = float32 , weak_type = True )","title":"dbeta()"},{"location":"api/distribution/beta/#stamox.distribution.rbeta","text":"Generates random numbers from the Beta distribution. Parameters: Name Type Description Default key Union[jax.Array, jax._src.prng.PRNGKeyArray] A PRNGKey used for random number generation. required sample_shape Optional[Sequence[int]] An optional shape for the output samples. None a Union[Float, ArrayLike] The shape parameter of the Beta distribution. Can be either a float or an array-like object. None b Union[Float, ArrayLike] The scale parameter of the Beta distribution. Can be either a float or an array-like object. None lower_tail bool Whether to return the lower tail probability (defaults to True). True log_prob bool Whether to return the log probability (defaults to False). False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random numbers from the Beta distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rbeta ( key , sample_shape = ( 3 ,), a = 2 , b = 3 ) Array ([ 0.02809353 , 0.13760717 , 0.49360353 ], dtype = float32 )","title":"rbeta()"},{"location":"api/distribution/binomial/","text":"Binomial Distribution \u00a4 stamox . distribution . pbinom ( q : ArrayLike , size : ArrayLike , prob : ArrayLike , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the cumulative probability of a binomial distribution. Parameters: Name Type Description Default q ArrayLike The quantiles to compute. required size ArrayLike The number of trials. required prob ArrayLike The probability of success in each trial. required lower_tail Bool If True (default), the lower tail probability is returned. True log_prob Bool If True, the logarithm of the probability is returned. False dtype optional The data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative probability of the binomial distribution. Examples: >>> q = jnp . array ([ 0.1 , 0.5 , 0.9 ]) >>> size = 10 >>> prob = 0.5 >>> pbinom ( q , size , prob ) stamox . distribution . qbinom ( p : ArrayLike , size : ArrayLike , prob : ArrayLike , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . int32 '>) -> ArrayLike \u00a4 Computes the quantile of a binomial distribution. Parameters: Name Type Description Default p ArrayLike The probability of success. required size ArrayLike The number of trials. required prob ArrayLike The probability of success in each trial. required lower_tail Bool Whether to compute the lower tail or not. Defaults to True. True log_prob Bool Whether to compute the log probability or not. Defaults to False. False dtype jnp.int32 The data type of the output array. Defaults to jnp.int32. <class 'jax.numpy.int32'> Returns: Type Description ArrayLike The quantile of the binomial distribution. stamox . distribution . dbinom ( q : ArrayLike , size : ArrayLike , prob : ArrayLike , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the probability of a binomial distribution. Parameters: Name Type Description Default q ArrayLike The value to compute the probability for. required size ArrayLike The number of trials in the binomial distribution. required prob ArrayLike The probability of success in each trial. required lower_tail Bool Whether to compute the lower tail probability. Defaults to True. True log_prob Bool Whether to return the logarithm of the probability. Defaults to False. False dtype jnp.float32 The data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability of the binomial distribution. stamox . distribution . rbinom ( key : Union [ jax . Array , jax . _src . prng . PRNGKeyArray ], sample_shape : Optional [ Sequence [ int ]] = None , n : ArrayLike = None , prob : ArrayLike = None , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random binomial samples from a given probability distribution. Parameters: Name Type Description Default key KeyArray A random number generator key. required sample_shape Optional[Shape] The shape of the output array. Defaults to None. None n ArrayLike The number of trials. Defaults to None. None prob ArrayLike The probability of success for each trial. Defaults to None. None lower_tail Bool Whether to return the lower tail of the distribution. Defaults to True. True log_prob Bool Whether to return the logarithm of the probability. Defaults to False. False dtype jnp.float32 The data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array containing the random binomial samples.","title":"Binomial Distribution"},{"location":"api/distribution/binomial/#binomial-distribution","text":"","title":"Binomial Distribution"},{"location":"api/distribution/binomial/#stamox.distribution.pbinom","text":"Calculates the cumulative probability of a binomial distribution. Parameters: Name Type Description Default q ArrayLike The quantiles to compute. required size ArrayLike The number of trials. required prob ArrayLike The probability of success in each trial. required lower_tail Bool If True (default), the lower tail probability is returned. True log_prob Bool If True, the logarithm of the probability is returned. False dtype optional The data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative probability of the binomial distribution. Examples: >>> q = jnp . array ([ 0.1 , 0.5 , 0.9 ]) >>> size = 10 >>> prob = 0.5 >>> pbinom ( q , size , prob )","title":"pbinom()"},{"location":"api/distribution/binomial/#stamox.distribution.qbinom","text":"Computes the quantile of a binomial distribution. Parameters: Name Type Description Default p ArrayLike The probability of success. required size ArrayLike The number of trials. required prob ArrayLike The probability of success in each trial. required lower_tail Bool Whether to compute the lower tail or not. Defaults to True. True log_prob Bool Whether to compute the log probability or not. Defaults to False. False dtype jnp.int32 The data type of the output array. Defaults to jnp.int32. <class 'jax.numpy.int32'> Returns: Type Description ArrayLike The quantile of the binomial distribution.","title":"qbinom()"},{"location":"api/distribution/binomial/#stamox.distribution.dbinom","text":"Computes the probability of a binomial distribution. Parameters: Name Type Description Default q ArrayLike The value to compute the probability for. required size ArrayLike The number of trials in the binomial distribution. required prob ArrayLike The probability of success in each trial. required lower_tail Bool Whether to compute the lower tail probability. Defaults to True. True log_prob Bool Whether to return the logarithm of the probability. Defaults to False. False dtype jnp.float32 The data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability of the binomial distribution.","title":"dbinom()"},{"location":"api/distribution/binomial/#stamox.distribution.rbinom","text":"Generates random binomial samples from a given probability distribution. Parameters: Name Type Description Default key KeyArray A random number generator key. required sample_shape Optional[Shape] The shape of the output array. Defaults to None. None n ArrayLike The number of trials. Defaults to None. None prob ArrayLike The probability of success for each trial. Defaults to None. None lower_tail Bool Whether to return the lower tail of the distribution. Defaults to True. True log_prob Bool Whether to return the logarithm of the probability. Defaults to False. False dtype jnp.float32 The data type of the output array. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array containing the random binomial samples.","title":"rbinom()"},{"location":"api/distribution/cauchy/","text":"Cauchy Distribution \u00a4 stamox . distribution . pcauchy ( q : Union [ Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the cumulative denisty probability c function of the Cauchy distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required loc Union[Float, ArrayLike] The location parameter of the Cauchy distribution. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Cauchy distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative density function of the Cauchy distribution. Examples: >>> pcauchy ( 1.0 , loc = 0.0 , scale = 1.0 , lower_tail = True , log_prob = False ) Array ([ 0.75 ], dtype = float32 , weak_type = True ) stamox . distribution . qcauchy ( q : Union [ Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile of the Cauchy distribution. Parameters: Name Type Description Default q Union[float, array-like] Quantiles to compute. required loc Union[float, array-like] Location parameter. Defaults to 0.0. 0.0 scale Union[float, array-like] Scale parameter. Defaults to 1.0. 1.0 lower_tail bool Whether to compute the lower tail. Defaults to True. True log_prob bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the Cauchy distribution. Examples: >>> qcauchy ( 0.5 , loc = 1.0 , scale = 2.0 , lower_tail = True , log_prob = False ) Array ([ 1. ], dtype = float32 , weak_type = True ) stamox . distribution . dcauchy ( x : Union [ Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the pdf of the Cauchy distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The input values. required loc Union[Float, ArrayLike] The location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter. Defaults to 1.0. 1.0 lower_tail Bool Whether to compute the lower tail. Defaults to True. True log_prob Bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The pdf of the Cauchy distribution. Examples: >>> dcauchy ( 1.0 , loc = 0.0 , scale = 1.0 , lower_tail = True , log_prob = False ) Array ([ 0.15915494 ], dtype = float32 , weak_type = True ) stamox . distribution . rcauchy ( key : PRNGKeyArray , sample_shape : Optional [ Sequence [ int ]] = None , loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random samples from the Cauchy distribution. Parameters: Name Type Description Default key PRNGKeyArray A PRNGKey to use for generating the samples. required sample_shape Optional[Sequence[int]] The shape of the output array. None loc Union[Float, ArrayLike] The location parameter of the Cauchy distribution. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Cauchy distribution. 1.0 lower_tail Bool Whether to return the lower tail probability. True log_prob Bool Whether to return the log probability. False dtype The dtype of the output. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array of samples from the Cauchy distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rcauchy ( key , sample_shape = ( 2 , 3 ), loc = 0.0 , scale = 1.0 ) Array ([[ 0.23841971 , - 3.0880406 , 0.9507532 ], [ 2.8963416 , 0.31303588 , - 0.14792857 ]], dtype = float32 )","title":"Cauchy Distribution"},{"location":"api/distribution/cauchy/#cauchy-distribution","text":"","title":"Cauchy Distribution"},{"location":"api/distribution/cauchy/#stamox.distribution.pcauchy","text":"Calculates the cumulative denisty probability c function of the Cauchy distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required loc Union[Float, ArrayLike] The location parameter of the Cauchy distribution. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Cauchy distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative density function of the Cauchy distribution. Examples: >>> pcauchy ( 1.0 , loc = 0.0 , scale = 1.0 , lower_tail = True , log_prob = False ) Array ([ 0.75 ], dtype = float32 , weak_type = True )","title":"pcauchy()"},{"location":"api/distribution/cauchy/#stamox.distribution.qcauchy","text":"Computes the quantile of the Cauchy distribution. Parameters: Name Type Description Default q Union[float, array-like] Quantiles to compute. required loc Union[float, array-like] Location parameter. Defaults to 0.0. 0.0 scale Union[float, array-like] Scale parameter. Defaults to 1.0. 1.0 lower_tail bool Whether to compute the lower tail. Defaults to True. True log_prob bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the Cauchy distribution. Examples: >>> qcauchy ( 0.5 , loc = 1.0 , scale = 2.0 , lower_tail = True , log_prob = False ) Array ([ 1. ], dtype = float32 , weak_type = True )","title":"qcauchy()"},{"location":"api/distribution/cauchy/#stamox.distribution.dcauchy","text":"Computes the pdf of the Cauchy distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The input values. required loc Union[Float, ArrayLike] The location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter. Defaults to 1.0. 1.0 lower_tail Bool Whether to compute the lower tail. Defaults to True. True log_prob Bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The pdf of the Cauchy distribution. Examples: >>> dcauchy ( 1.0 , loc = 0.0 , scale = 1.0 , lower_tail = True , log_prob = False ) Array ([ 0.15915494 ], dtype = float32 , weak_type = True )","title":"dcauchy()"},{"location":"api/distribution/cauchy/#stamox.distribution.rcauchy","text":"Generates random samples from the Cauchy distribution. Parameters: Name Type Description Default key PRNGKeyArray A PRNGKey to use for generating the samples. required sample_shape Optional[Sequence[int]] The shape of the output array. None loc Union[Float, ArrayLike] The location parameter of the Cauchy distribution. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Cauchy distribution. 1.0 lower_tail Bool Whether to return the lower tail probability. True log_prob Bool Whether to return the log probability. False dtype The dtype of the output. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array of samples from the Cauchy distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rcauchy ( key , sample_shape = ( 2 , 3 ), loc = 0.0 , scale = 1.0 ) Array ([[ 0.23841971 , - 3.0880406 , 0.9507532 ], [ 2.8963416 , 0.31303588 , - 0.14792857 ]], dtype = float32 )","title":"rcauchy()"},{"location":"api/distribution/chisq/","text":"Chisquare Distribution \u00a4 stamox . distribution . pchisq ( q : Union [ Float , ArrayLike ], df : Union [ Int , Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the chi-squared probability density function. Parameters: Name Type Description Default q Union[float, array-like] The value of the chi-squared variable. required df Union[int, float, array-like] The degrees of freedom. required lower_tail bool Whether to calculate the lower tail (default True). True log_prob bool Whether to return the log probability (default False). False dtype dtype The dtype of the output (default float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The chi-squared probability density function. Examples: >>> pchisq ( 2.0 , 3 , lower_tail = True , log_prob = False ) Array ([ 0.42759317 ], dtype = float32 , weak_type = True ) stamox . distribution . qchisq ( p : Union [ Float , ArrayLike ], df : Union [ Int , Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the inverse of the chi-squared cumulative distribution function. Parameters: Name Type Description Default p Union[Float, ArrayLike] Probability value or array of probability values. required df Union[Int, Float, ArrayLike] Degrees of freedom. required lower_tail bool If True (default), probabilities are P[X \u2264 x], otherwise, P[X > x]. True log_prob bool If True, probabilities are given as log(p). False dtype dtype The dtype of the output (default float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles corresponding to the given probabilities. Examples: >>> qchisq ( 0.95 , 10 ) Array ([ 18.307034 ], dtype = float32 ) stamox . distribution . dchisq ( x : Union [ Float , ArrayLike ], df : Union [ Int , Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the chi-squared distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] A float or array-like object representing the values at which to evaluate the chi-squared distribution. required df Union[Int, Float, ArrayLike] The degrees of freedom for the chi-squared distribution. required lower_tail A boolean indicating whether to compute the lower tail of the chi-squared distribution (defaults to True). True log_prob A boolean indicating whether to return the log probability (defaults to False). False dtype The dtype of the output (defaults to float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The chi-squared distribution evaluated at x . Examples: >>> dchisq ( 2.0 , 3 , lower_tail = True , log_prob = False ) Array ([ 0.20755368 ], dtype = float32 , weak_type = True ) stamox . distribution . rchisq ( key : Union [ jax . Array , jax . _src . prng . PRNGKeyArray ], sample_shape : Optional [ Sequence [ int ]] = None , df : Union [ Int , Float , ArrayLike ] = None , lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random variates from the chi-squared distribution. Parameters: Name Type Description Default key KeyArray Random key to generate the random numbers. required sample_shape Optional[Shape] Shape of the output array. Defaults to None. None df Union[Int, Float, ArrayLike] Degrees of freedom. Defaults to None. None lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype dtype The dtype of the output (default float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random variates from the chi-squared distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rchisq ( key , df = 2 ) Array ( 1.982825 , dtype = float32 )","title":"Chisquare Distribution"},{"location":"api/distribution/chisq/#chisquare-distribution","text":"","title":"Chisquare Distribution"},{"location":"api/distribution/chisq/#stamox.distribution.pchisq","text":"Calculates the chi-squared probability density function. Parameters: Name Type Description Default q Union[float, array-like] The value of the chi-squared variable. required df Union[int, float, array-like] The degrees of freedom. required lower_tail bool Whether to calculate the lower tail (default True). True log_prob bool Whether to return the log probability (default False). False dtype dtype The dtype of the output (default float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The chi-squared probability density function. Examples: >>> pchisq ( 2.0 , 3 , lower_tail = True , log_prob = False ) Array ([ 0.42759317 ], dtype = float32 , weak_type = True )","title":"pchisq()"},{"location":"api/distribution/chisq/#stamox.distribution.qchisq","text":"Computes the inverse of the chi-squared cumulative distribution function. Parameters: Name Type Description Default p Union[Float, ArrayLike] Probability value or array of probability values. required df Union[Int, Float, ArrayLike] Degrees of freedom. required lower_tail bool If True (default), probabilities are P[X \u2264 x], otherwise, P[X > x]. True log_prob bool If True, probabilities are given as log(p). False dtype dtype The dtype of the output (default float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles corresponding to the given probabilities. Examples: >>> qchisq ( 0.95 , 10 ) Array ([ 18.307034 ], dtype = float32 )","title":"qchisq()"},{"location":"api/distribution/chisq/#stamox.distribution.dchisq","text":"Computes the chi-squared distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] A float or array-like object representing the values at which to evaluate the chi-squared distribution. required df Union[Int, Float, ArrayLike] The degrees of freedom for the chi-squared distribution. required lower_tail A boolean indicating whether to compute the lower tail of the chi-squared distribution (defaults to True). True log_prob A boolean indicating whether to return the log probability (defaults to False). False dtype The dtype of the output (defaults to float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The chi-squared distribution evaluated at x . Examples: >>> dchisq ( 2.0 , 3 , lower_tail = True , log_prob = False ) Array ([ 0.20755368 ], dtype = float32 , weak_type = True )","title":"dchisq()"},{"location":"api/distribution/chisq/#stamox.distribution.rchisq","text":"Generates random variates from the chi-squared distribution. Parameters: Name Type Description Default key KeyArray Random key to generate the random numbers. required sample_shape Optional[Shape] Shape of the output array. Defaults to None. None df Union[Int, Float, ArrayLike] Degrees of freedom. Defaults to None. None lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype dtype The dtype of the output (default float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random variates from the chi-squared distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rchisq ( key , df = 2 ) Array ( 1.982825 , dtype = float32 )","title":"rchisq()"},{"location":"api/distribution/ecdf/","text":"Empirical Cumulative Distribution Function \u00a4 stamox . distribution . step_fun ( x , y , ival = 0.0 , sorted = False , side = 'left' , dtype = < class ' jax . numpy . float32 '>) \u00a4 Returns a function that evaluates a step function at given points. Parameters: Name Type Description Default x array-like The x-coordinates of the step points. required y array-like The y-coordinates of the step points. required ival float The initial value of the step function. Defaults to 0. 0.0 sorted bool Whether the x-coordinates are already sorted. Defaults to False. False side str The side of the interval to take when evaluating the step function. Must be either 'left' or 'right'. Defaults to 'left'. 'left' dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description Callable[..., ArrayLike] A function that evaluates the step function at given points. stamox . distribution . ecdf ( x : ArrayLike , side = 'right' , dtype = < class ' jax . numpy . float32 '>) -> Callable[..., ArrayLike] \u00a4 Calculates the empirical cumulative distribution function (ECDF) of a given array. Parameters: Name Type Description Default x array The array to calculate the ECDF for. required side str Specifies which side of the step function to use. Defaults to 'right'. 'right' dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description Callable[..., ArrayLike] A function that evaluates the ECDF at given points.","title":"Empirical Cumulative Distribution Function"},{"location":"api/distribution/ecdf/#empirical-cumulative-distribution-function","text":"","title":"Empirical Cumulative Distribution Function"},{"location":"api/distribution/ecdf/#stamox.distribution.step_fun","text":"Returns a function that evaluates a step function at given points. Parameters: Name Type Description Default x array-like The x-coordinates of the step points. required y array-like The y-coordinates of the step points. required ival float The initial value of the step function. Defaults to 0. 0.0 sorted bool Whether the x-coordinates are already sorted. Defaults to False. False side str The side of the interval to take when evaluating the step function. Must be either 'left' or 'right'. Defaults to 'left'. 'left' dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description Callable[..., ArrayLike] A function that evaluates the step function at given points.","title":"step_fun()"},{"location":"api/distribution/ecdf/#stamox.distribution.ecdf","text":"Calculates the empirical cumulative distribution function (ECDF) of a given array. Parameters: Name Type Description Default x array The array to calculate the ECDF for. required side str Specifies which side of the step function to use. Defaults to 'right'. 'right' dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description Callable[..., ArrayLike] A function that evaluates the ECDF at given points.","title":"ecdf()"},{"location":"api/distribution/exp/","text":"Exponential Distribution \u00a4 stamox . distribution . pexp ( q : Union [ Float , ArrayLike ], rate : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the probability of a given value or array of values for an exponential distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] Union[Float, ArrayLike]. The value or array of values to calculate the probability of. required rate Union[Float, ArrayLike] Union[Float, ArrayLike]. The rate parameter of the exponential distribution. required lower_tail bool bool, optional. Whether to return the lower tail probability (default is True). True log_prob bool bool, optional. Whether to return the log probability (default is False). False dtype jnp.dtype, optional. The dtype of the output (default is float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability of the given value or array of values. Examples: >>> pexp ( 1.0 , 0.5 ) Array ([ 0.39346933 ], dtype = float32 , weak_type = True ) stamox . distribution . qexp ( p : Union [ float , ArrayLike ], rate : Union [ float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile of an exponential distribution. Parameters: Name Type Description Default p Union[float, ArrayLike] Probability or log probability. required rate Union[float, ArrayLike] Rate parameter of the exponential distribution. required lower_tail bool Whether to compute the lower tail. Defaults to True. True log_prob bool Whether p is a log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantile of the exponential distribution. Examples: >>> qexp ( 0.5 , 1.0 ) Array ([ 0.6931472 ], dtype = float32 , weak_type = True ) stamox . distribution . dexp ( x : Union [ Float , ArrayLike ], rate : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the derivative of the exponential distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the derivative. required rate Union[Float, ArrayLike] The rate parameter of the exponential distribution. required lower_tail bool Whether to calculate the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The derivative of the exponential distribution evaluated at x. Examples: >>> dexp ( 1.0 , 0.5 , lower_tail = True , log_prob = False ) Array ([ 0.30326533 ], dtype = float32 , weak_type = True ) stamox . distribution . rexp ( key : Union [ jax . Array , jax . _src . prng . PRNGKeyArray ], sample_shape : Optional [ Sequence [ int ]] = None , rate : Union [ Float , ArrayLike ] = None , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random samples from the exponential distribution. Parameters: Name Type Description Default key KeyArray A PRNGKey to use for generating random numbers. required sample_shape Optional[Shape] The shape of the output array. Defaults to None. None rate Union[Float, ArrayLike] The rate parameter of the exponential distribution. Defaults to None. None lower_tail bool Whether to return the lower tail of the distribution. Defaults to True. True log_prob bool Whether to return the log probability of the samples. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array of random samples from the exponential distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rexp ( key , sample_shape = ( 2 , 3 ), rate = 1.0 , lower_tail = False , log_prob = True ) Array ([[ - 0.69314718 , - 0.69314718 , - 0.69314718 ], [ - 0.69314718 , - 0.69314718 , - 0.69314718 ]], dtype = float32 )","title":"Exponential Distribution"},{"location":"api/distribution/exp/#exponential-distribution","text":"","title":"Exponential Distribution"},{"location":"api/distribution/exp/#stamox.distribution.pexp","text":"Calculates the probability of a given value or array of values for an exponential distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] Union[Float, ArrayLike]. The value or array of values to calculate the probability of. required rate Union[Float, ArrayLike] Union[Float, ArrayLike]. The rate parameter of the exponential distribution. required lower_tail bool bool, optional. Whether to return the lower tail probability (default is True). True log_prob bool bool, optional. Whether to return the log probability (default is False). False dtype jnp.dtype, optional. The dtype of the output (default is float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability of the given value or array of values. Examples: >>> pexp ( 1.0 , 0.5 ) Array ([ 0.39346933 ], dtype = float32 , weak_type = True )","title":"pexp()"},{"location":"api/distribution/exp/#stamox.distribution.qexp","text":"Computes the quantile of an exponential distribution. Parameters: Name Type Description Default p Union[float, ArrayLike] Probability or log probability. required rate Union[float, ArrayLike] Rate parameter of the exponential distribution. required lower_tail bool Whether to compute the lower tail. Defaults to True. True log_prob bool Whether p is a log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantile of the exponential distribution. Examples: >>> qexp ( 0.5 , 1.0 ) Array ([ 0.6931472 ], dtype = float32 , weak_type = True )","title":"qexp()"},{"location":"api/distribution/exp/#stamox.distribution.dexp","text":"Calculates the derivative of the exponential distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the derivative. required rate Union[Float, ArrayLike] The rate parameter of the exponential distribution. required lower_tail bool Whether to calculate the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The derivative of the exponential distribution evaluated at x. Examples: >>> dexp ( 1.0 , 0.5 , lower_tail = True , log_prob = False ) Array ([ 0.30326533 ], dtype = float32 , weak_type = True )","title":"dexp()"},{"location":"api/distribution/exp/#stamox.distribution.rexp","text":"Generates random samples from the exponential distribution. Parameters: Name Type Description Default key KeyArray A PRNGKey to use for generating random numbers. required sample_shape Optional[Shape] The shape of the output array. Defaults to None. None rate Union[Float, ArrayLike] The rate parameter of the exponential distribution. Defaults to None. None lower_tail bool Whether to return the lower tail of the distribution. Defaults to True. True log_prob bool Whether to return the log probability of the samples. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array of random samples from the exponential distribution. Examples: >>> key = jax . random . PRNGKey ( 0 ) >>> rexp ( key , sample_shape = ( 2 , 3 ), rate = 1.0 , lower_tail = False , log_prob = True ) Array ([[ - 0.69314718 , - 0.69314718 , - 0.69314718 ], [ - 0.69314718 , - 0.69314718 , - 0.69314718 ]], dtype = float32 )","title":"rexp()"},{"location":"api/distribution/f/","text":"F Distribution \u00a4 stamox . distribution . pF ( q : Union [ Float , ArrayLike ], dfn : Union [ Float , ArrayLike ], dfd : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the cumulative distribution function of the F-distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the cdf. required dfn Union[Float, ArrayLike] The numerator degrees of freedom. required dfd Union[Float, ArrayLike] The denominator degrees of freedom. required lower_tail bool If True (default), the lower tail probability is returned. True log_prob bool If True, the logarithm of the probability is returned. False dtype jnp.dtype The dtype of the output (default is float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function evaluated at q . Examples: >>> pF ( 1.0 , 1.0 , 1.0 ) Array ([ 0.5000001 ], dtype = float32 , weak_type = True ) stamox . distribution . qF ( p : Union [ Float , ArrayLike ], dfn : Union [ Float , ArrayLike ], dfd : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the quantile function of a given distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] The quantile to calculate. required dfn Union[Float, ArrayLike] The degrees of freedom for the numerator. required dfd Union[Float, ArrayLike] The degrees of freedom for the denominator. required lower_tail bool Whether to calculate the lower tail or not. Defaults to True. True log_prob bool Whether to calculate the log probability or not. Defaults to False. False Returns: Type Description ArrayLike The calculated quantile. Examples: >>> qF ( 0.5 , 1.0 , 1.0 ) Array ([ 0.99999714 ], dtype = float32 ) stamox . distribution . dF ( x : Union [ Float , ArrayLike ], dfn : Union [ Float , ArrayLike ], dfd : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the gradient of the cumulative distribution function for a given x, dfn and dfd. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to calculate the gradient of the cumulative distribution function. required dfn Union[Float, ArrayLike] The numerator degrees of freedom. required dfd Union[Float, ArrayLike] The denominator degrees of freedom. required lower_tail bool Whether to calculate the lower tail of the cumulative distribution function. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The gradient of the cumulative distribution function. Examples: >>> dF ( 1.0 , 1.0 , 1.0 ) Array ([ 0.1591549 ], dtype = float32 , weak_type = True ) stamox . distribution . rF ( key : Union [ jax . Array , jax . _src . prng . PRNGKeyArray ], sample_shape : Optional [ Sequence [ int ]] = None , dfn : Union [ Float , ArrayLike ] = None , dfd : Union [ Float , ArrayLike ] = None , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) \u00a4 Generate random variates from F-distribution. Parameters: Name Type Description Default key KeyArray Random key used for PRNG. required sample_shape Optional[Shape] Shape of the samples to be drawn. Defaults to None. None dfn Union[Float, ArrayLike] Degrees of freedom in numerator. None dfd Union[Float, ArrayLike] Degrees of freedom in denominator. None lower_tail bool Whether to calculate the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random variates from F-distribution. Examples: >>> rF ( jax . random . PRNGKey ( 0 ), dfn = 1.0 , dfd = 1.0 ) Array ( 40.787617 , dtype = float32 )","title":"F Distribution"},{"location":"api/distribution/f/#f-distribution","text":"","title":"F Distribution"},{"location":"api/distribution/f/#stamox.distribution.pF","text":"Calculates the cumulative distribution function of the F-distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the cdf. required dfn Union[Float, ArrayLike] The numerator degrees of freedom. required dfd Union[Float, ArrayLike] The denominator degrees of freedom. required lower_tail bool If True (default), the lower tail probability is returned. True log_prob bool If True, the logarithm of the probability is returned. False dtype jnp.dtype The dtype of the output (default is float32). <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function evaluated at q . Examples: >>> pF ( 1.0 , 1.0 , 1.0 ) Array ([ 0.5000001 ], dtype = float32 , weak_type = True )","title":"pF()"},{"location":"api/distribution/f/#stamox.distribution.qF","text":"Calculates the quantile function of a given distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] The quantile to calculate. required dfn Union[Float, ArrayLike] The degrees of freedom for the numerator. required dfd Union[Float, ArrayLike] The degrees of freedom for the denominator. required lower_tail bool Whether to calculate the lower tail or not. Defaults to True. True log_prob bool Whether to calculate the log probability or not. Defaults to False. False Returns: Type Description ArrayLike The calculated quantile. Examples: >>> qF ( 0.5 , 1.0 , 1.0 ) Array ([ 0.99999714 ], dtype = float32 )","title":"qF()"},{"location":"api/distribution/f/#stamox.distribution.dF","text":"Calculates the gradient of the cumulative distribution function for a given x, dfn and dfd. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to calculate the gradient of the cumulative distribution function. required dfn Union[Float, ArrayLike] The numerator degrees of freedom. required dfd Union[Float, ArrayLike] The denominator degrees of freedom. required lower_tail bool Whether to calculate the lower tail of the cumulative distribution function. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The gradient of the cumulative distribution function. Examples: >>> dF ( 1.0 , 1.0 , 1.0 ) Array ([ 0.1591549 ], dtype = float32 , weak_type = True )","title":"dF()"},{"location":"api/distribution/f/#stamox.distribution.rF","text":"Generate random variates from F-distribution. Parameters: Name Type Description Default key KeyArray Random key used for PRNG. required sample_shape Optional[Shape] Shape of the samples to be drawn. Defaults to None. None dfn Union[Float, ArrayLike] Degrees of freedom in numerator. None dfd Union[Float, ArrayLike] Degrees of freedom in denominator. None lower_tail bool Whether to calculate the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random variates from F-distribution. Examples: >>> rF ( jax . random . PRNGKey ( 0 ), dfn = 1.0 , dfd = 1.0 ) Array ( 40.787617 , dtype = float32 )","title":"rF()"},{"location":"api/distribution/gamma/","text":"Gamma Distribution \u00a4 stamox . distribution . pgamma ( q : Union [ Float , ArrayLike ], shape : Union [ Float , ArrayLike ] = 1.0 , rate : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the cumulative distribution function of the gamma distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] A float or array-like object representing the input to the gamma function. required shape Union[Float, ArrayLike] A float or array-like object representing the shape parameter of the gamma function. 1.0 rate Union[Float, ArrayLike] A float or array-like object representing the rate parameter of the gamma function. 1.0 lower_tail bool A boolean indicating whether to compute the lower tail of the gamma function. True log_prob bool A boolean indicating whether to compute the logarithm of the probability density function. False dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The CDF value of the given value or array of values. Examples: >>> pgamma ( 1.0 , 0.5 , 0.5 ) Array ([ 0.6826893 ], dtype = float32 , weak_type = True ) stamox . distribution . qgamma ( p : Union [ Float , ArrayLike ], shape : Union [ Float , ArrayLike ] = 1.0 , rate : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile of the gamma distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] A float or array-like object representing the quantile. required shape Union[Float, ArrayLike] A float or array-like object representing the shape parameter of the gamma distribution. 1.0 rate Union[Float, ArrayLike] A float or array-like object representing the rate parameter of the gamma distribution. 1.0 lower_tail bool A boolean indicating whether to compute the lower tail (default) or upper tail. True log_prob bool A boolean indicating whether to compute the log probability (default False). False dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantile of the gamma distribution. Examples: >>> qgamma ( 0.5 , 0.5 , 0.5 ) Array ([ 0.45493677 ], dtype = float32 ) stamox . distribution . dgamma ( x : Union [ Float , ArrayLike ], shape : Union [ Float , ArrayLike ] = 1.0 , rate : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Compute density of gamma distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the gamma distribution. required shape Union[Float, ArrayLike] The shape parameter of the gamma distribution. Defaults to 1.0. 1.0 rate Union[Float, ArrayLike] The rate parameter of the gamma distribution. Defaults to 1.0. 1.0 lower_tail bool Whether to compute the lower tail of the gamma distribution. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The density of the gamma distribution evaluated at x . If log_prob is True, returns the log probability. Examples: >>> dgamma ( 1.0 , 0.5 , 0.5 ) Array ([ 0.24197064 ], dtype = float32 , weak_type = True ) stamox . distribution . rgamma ( key , sample_shape : Optional [ Sequence [ int ]] = None , shape : Union [ Float , ArrayLike ] = 1.0 , rate : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random gamma values. Parameters: Name Type Description Default key A PRNGKey to use for the random number generation. required sample_shape Optional[Sequence[int]] An optional shape for the output array. None shape Union[Float, ArrayLike] The shape parameter of the gamma distribution. 1.0 rate Union[Float, ArrayLike] The rate parameter of the gamma distribution. 1.0 lower_tail bool Whether to return the lower tail of the distribution. True log_prob bool Whether to return the log probability of the result. False dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike A random gamma value or an array of random gamma values. Examples: >>> rgamma ( key , shape = 0.5 , rate = 0.5 ) Array ( 0.3384059 , dtype = float32 )","title":"Gamma Distribution"},{"location":"api/distribution/gamma/#gamma-distribution","text":"","title":"Gamma Distribution"},{"location":"api/distribution/gamma/#stamox.distribution.pgamma","text":"Computes the cumulative distribution function of the gamma distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] A float or array-like object representing the input to the gamma function. required shape Union[Float, ArrayLike] A float or array-like object representing the shape parameter of the gamma function. 1.0 rate Union[Float, ArrayLike] A float or array-like object representing the rate parameter of the gamma function. 1.0 lower_tail bool A boolean indicating whether to compute the lower tail of the gamma function. True log_prob bool A boolean indicating whether to compute the logarithm of the probability density function. False dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The CDF value of the given value or array of values. Examples: >>> pgamma ( 1.0 , 0.5 , 0.5 ) Array ([ 0.6826893 ], dtype = float32 , weak_type = True )","title":"pgamma()"},{"location":"api/distribution/gamma/#stamox.distribution.qgamma","text":"Computes the quantile of the gamma distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] A float or array-like object representing the quantile. required shape Union[Float, ArrayLike] A float or array-like object representing the shape parameter of the gamma distribution. 1.0 rate Union[Float, ArrayLike] A float or array-like object representing the rate parameter of the gamma distribution. 1.0 lower_tail bool A boolean indicating whether to compute the lower tail (default) or upper tail. True log_prob bool A boolean indicating whether to compute the log probability (default False). False dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantile of the gamma distribution. Examples: >>> qgamma ( 0.5 , 0.5 , 0.5 ) Array ([ 0.45493677 ], dtype = float32 )","title":"qgamma()"},{"location":"api/distribution/gamma/#stamox.distribution.dgamma","text":"Compute density of gamma distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the gamma distribution. required shape Union[Float, ArrayLike] The shape parameter of the gamma distribution. Defaults to 1.0. 1.0 rate Union[Float, ArrayLike] The rate parameter of the gamma distribution. Defaults to 1.0. 1.0 lower_tail bool Whether to compute the lower tail of the gamma distribution. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The density of the gamma distribution evaluated at x . If log_prob is True, returns the log probability. Examples: >>> dgamma ( 1.0 , 0.5 , 0.5 ) Array ([ 0.24197064 ], dtype = float32 , weak_type = True )","title":"dgamma()"},{"location":"api/distribution/gamma/#stamox.distribution.rgamma","text":"Generates random gamma values. Parameters: Name Type Description Default key A PRNGKey to use for the random number generation. required sample_shape Optional[Sequence[int]] An optional shape for the output array. None shape Union[Float, ArrayLike] The shape parameter of the gamma distribution. 1.0 rate Union[Float, ArrayLike] The rate parameter of the gamma distribution. 1.0 lower_tail bool Whether to return the lower tail of the distribution. True log_prob bool Whether to return the log probability of the result. False dtype The dtype of the output. Defaults to float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike A random gamma value or an array of random gamma values. Examples: >>> rgamma ( key , shape = 0.5 , rate = 0.5 ) Array ( 0.3384059 , dtype = float32 )","title":"rgamma()"},{"location":"api/distribution/laplace/","text":"Laplace Distribution \u00a4 stamox . distribution . plaplace ( q : Union [ Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the Laplace cumulative density function. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the Plaplace PDF. required loc Union[Float, ArrayLike] The location parameter of the Plaplace PDF. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Plaplace PDF. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail of the Plaplace PDF. Defaults to True. True log_prob Bool Whether to return the logarithm of the Plaplace PDF. Defaults to False. False Returns: Type Description ArrayLike The Laplace CDF evaluated at q . Examples: >>> plaplace ( 1.0 , 1.0 , 1.0 ) Array ([ 0.5 ], dtype = float32 , weak_type = True ) stamox . distribution . qlaplace ( p : Union [ Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile of the Laplace distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] Quantiles to compute. required loc Union[Float, ArrayLike] Location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] Scale parameter. Defaults to 1.0. 1.0 lower_tail Bool Whether to compute the lower tail. Defaults to True. True log_prob Bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the Laplace distribution. Examples: >>> qlaplace ( 0.5 , 1.0 , 1.0 ) Array ([ 1. ], dtype = float32 , weak_type = True ) stamox . distribution . dlaplace ( x : Union [ Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the Laplace probability density function for a given x, location and scale. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to calculate the probability density. required loc Union[Float, ArrayLike] The location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail of the distribution. Defaults to True. True log_prob Bool Whether to return the logarithm of the probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density at the given x. Examples: >>> dlaplace ( 1.0 , 1.0 , 1.0 ) Array ([ 0. ], dtype = float32 , weak_type = True ) stamox . distribution . rlaplace ( key : PRNGKeyArray , sample_shape : Optional [ Sequence [ int ]] = None , loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random Laplace samples from a given key. Parameters: Name Type Description Default key KeyArray The PRNG key to use for generating the samples. required sample_shape Optional[Shape] The shape of the output array. Defaults to None. None loc Union[Float, ArrayLike] The location parameter of the Laplace distribution. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Laplace distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array containing the random Laplace samples. Examples: >>> rlaplace ( key , ( 2 , 3 )) Array ([[ - 0.16134426 , 1.6125823 , - 0.6615164 ], [ - 1.5528525 , - 0.21459664 , 0.09816013 ]], dtype = float32 )","title":"Laplace Distribution"},{"location":"api/distribution/laplace/#laplace-distribution","text":"","title":"Laplace Distribution"},{"location":"api/distribution/laplace/#stamox.distribution.plaplace","text":"Calculates the Laplace cumulative density function. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the Plaplace PDF. required loc Union[Float, ArrayLike] The location parameter of the Plaplace PDF. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Plaplace PDF. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail of the Plaplace PDF. Defaults to True. True log_prob Bool Whether to return the logarithm of the Plaplace PDF. Defaults to False. False Returns: Type Description ArrayLike The Laplace CDF evaluated at q . Examples: >>> plaplace ( 1.0 , 1.0 , 1.0 ) Array ([ 0.5 ], dtype = float32 , weak_type = True )","title":"plaplace()"},{"location":"api/distribution/laplace/#stamox.distribution.qlaplace","text":"Computes the quantile of the Laplace distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] Quantiles to compute. required loc Union[Float, ArrayLike] Location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] Scale parameter. Defaults to 1.0. 1.0 lower_tail Bool Whether to compute the lower tail. Defaults to True. True log_prob Bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the Laplace distribution. Examples: >>> qlaplace ( 0.5 , 1.0 , 1.0 ) Array ([ 1. ], dtype = float32 , weak_type = True )","title":"qlaplace()"},{"location":"api/distribution/laplace/#stamox.distribution.dlaplace","text":"Calculates the Laplace probability density function for a given x, location and scale. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to calculate the probability density. required loc Union[Float, ArrayLike] The location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail of the distribution. Defaults to True. True log_prob Bool Whether to return the logarithm of the probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density at the given x. Examples: >>> dlaplace ( 1.0 , 1.0 , 1.0 ) Array ([ 0. ], dtype = float32 , weak_type = True )","title":"dlaplace()"},{"location":"api/distribution/laplace/#stamox.distribution.rlaplace","text":"Generates random Laplace samples from a given key. Parameters: Name Type Description Default key KeyArray The PRNG key to use for generating the samples. required sample_shape Optional[Shape] The shape of the output array. Defaults to None. None loc Union[Float, ArrayLike] The location parameter of the Laplace distribution. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] The scale parameter of the Laplace distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to return the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array containing the random Laplace samples. Examples: >>> rlaplace ( key , ( 2 , 3 )) Array ([[ - 0.16134426 , 1.6125823 , - 0.6615164 ], [ - 1.5528525 , - 0.21459664 , 0.09816013 ]], dtype = float32 )","title":"rlaplace()"},{"location":"api/distribution/normal/","text":"Normal Distribution \u00a4 stamox . distribution . pnorm ( q : Union [ Float , ArrayLike ], mean : Union [ Float , ArrayLike ] = 0.0 , sd : Union [ Float , ArrayLike ] = 1.0 , lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculate the cumulative distribution function (CDF) of the normal distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The quantiles to calculate the CDF at. required mean Union[Float, ArrayLike] The mean of the normal distribution. Defaults to 0.0. 0.0 sd Union[Float, ArrayLike] The standard deviation of the normal distribution. Defaults to 1.0. 1.0 lower_tail bool If True, calculate the probability that x is less than or equal to the given quantile(s). If False, calculate the probability that x is greater than the given quantile(s). Defaults to True. True log_prob bool If True, return the log of the CDF instead of the actual value. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The CDF of the normal distribution evaluated at x. Examples: >>> pnorm ( 2.0 ) Array ([ 0.97724986 ], dtype = float32 ) >>> pnorm ([ 1.5 , 2.0 , 2.5 ], mean = 2.0 , sd = 0.5 , lower_tail = False ) Array ([ 0.8413447 , 0.5 , 0.15865529 ], dtype = float32 ) stamox . distribution . qnorm ( p : Union [ Float , ArrayLike ], mean : Union [ Float , ArrayLike ] = 0.0 , sd : Union [ Float , ArrayLike ] = 1.0 , lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the quantile function of the normal distribution for a given probability. Parameters: Name Type Description Default p float or jnp.ndarray Probability values. required mean float or jnp.ndarray Mean of the normal distribution. Default is 0.0. 0.0 sd float or jnp.ndarray Standard deviation of the normal distribution. Default is 1.0. 1.0 lower_tail bool If True , returns P(X \u2264 x). If False , returns P(X > x). Default is True . True log_prob bool If True , returns the logarithm of the quantile function. Default is False . False dtype jnp.dtype The dtype of the output. Default is jnp.float32 . <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The inverse cumulative density function of the normal distribution evaluated at q . Examples: >>> qnorm ( 0.5 ) Array ([ 0. ], dtype = float32 ) >>> qnorm ([ 0.25 , 0.75 ], mean = 3 , sd = 2 ) Array ([ 1.6510204 , 4.3489795 ], dtype = float32 ) stamox . distribution . dnorm ( x : Union [ Float , ArrayLike ], mean : Union [ Float , ArrayLike ] = 0.0 , sd : Union [ Float , ArrayLike ] = 1.0 , lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Probability density function (PDF) for Normal distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The input value(s) at which to evaluate the PDF. required mean Union[Float, ArrayLike] The mean of the normal distribution. Defaults to 0.0. 0.0 sd Union[Float, ArrayLike] The standard deviation of the normal distribution. Defaults to 1.0. 1.0 lower_tail bool If True (default), returns the cumulative distribution function (CDF) from negative infinity up to x. Otherwise, returns the CDF from x to positive infinity. True log_prob bool If True, returns the log-probability instead of the probability. False dtype jnp.dtype The dtype of the output. Default is jnp.float32 . <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function evaluated at point(s) x. Examples: >>> import jax.numpy as jnp >>> x = jnp . array ([ 0.5 , 1.0 , - 1.5 ]) >>> dnorm ( x ) Array ([ 0.35206532 , 0.24197075 , 0.12951761 ], dtype = float32 ) stamox . distribution . rnorm ( key : PRNGKeyArray , sample_shape : Optional [ Sequence [ int ]] = None , mean : Union [ Float , ArrayLike ] = 0.0 , sd : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random variables from a normal distribution. Parameters: Name Type Description Default key PRNGKeyArray A KeyArray object used to generate the random numbers. required sample_shape Optional[Sequence[int]] An optional tuple of integers specifying the shape of the None mean Union[Float, ArrayLike] The mean of the normal distribution. Defaults to 0.0. 0.0 sd Union[Float, ArrayLike] The standard deviation of the normal distribution. Defaults to 1.0. 1.0 lower_tail Bool If True (default), returns the cumulative distribution function (CDF) from negative infinity up to x. Otherwise, returns the CDF from x to positive infinity. True log_prob Bool If True, returns the log-probability instead of the probability. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random samples from a normal distribution. Examples: >>> import jax.numpy as jnp >>> from jax import random >>> key = random . PRNGKey ( 0 ) >>> rnorm ( key , sample_shape = ( 3 , 2 )) Array ([[ 0.18784384 , - 1.2833426 ], [ 0.6494181 , 1.2490594 ], [ 0.24447003 , - 0.11744965 ]], dtype = float32 )","title":"Normal Distribution"},{"location":"api/distribution/normal/#normal-distribution","text":"","title":"Normal Distribution"},{"location":"api/distribution/normal/#stamox.distribution.pnorm","text":"Calculate the cumulative distribution function (CDF) of the normal distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The quantiles to calculate the CDF at. required mean Union[Float, ArrayLike] The mean of the normal distribution. Defaults to 0.0. 0.0 sd Union[Float, ArrayLike] The standard deviation of the normal distribution. Defaults to 1.0. 1.0 lower_tail bool If True, calculate the probability that x is less than or equal to the given quantile(s). If False, calculate the probability that x is greater than the given quantile(s). Defaults to True. True log_prob bool If True, return the log of the CDF instead of the actual value. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The CDF of the normal distribution evaluated at x. Examples: >>> pnorm ( 2.0 ) Array ([ 0.97724986 ], dtype = float32 ) >>> pnorm ([ 1.5 , 2.0 , 2.5 ], mean = 2.0 , sd = 0.5 , lower_tail = False ) Array ([ 0.8413447 , 0.5 , 0.15865529 ], dtype = float32 )","title":"pnorm()"},{"location":"api/distribution/normal/#stamox.distribution.qnorm","text":"Calculates the quantile function of the normal distribution for a given probability. Parameters: Name Type Description Default p float or jnp.ndarray Probability values. required mean float or jnp.ndarray Mean of the normal distribution. Default is 0.0. 0.0 sd float or jnp.ndarray Standard deviation of the normal distribution. Default is 1.0. 1.0 lower_tail bool If True , returns P(X \u2264 x). If False , returns P(X > x). Default is True . True log_prob bool If True , returns the logarithm of the quantile function. Default is False . False dtype jnp.dtype The dtype of the output. Default is jnp.float32 . <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The inverse cumulative density function of the normal distribution evaluated at q . Examples: >>> qnorm ( 0.5 ) Array ([ 0. ], dtype = float32 ) >>> qnorm ([ 0.25 , 0.75 ], mean = 3 , sd = 2 ) Array ([ 1.6510204 , 4.3489795 ], dtype = float32 )","title":"qnorm()"},{"location":"api/distribution/normal/#stamox.distribution.dnorm","text":"Probability density function (PDF) for Normal distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The input value(s) at which to evaluate the PDF. required mean Union[Float, ArrayLike] The mean of the normal distribution. Defaults to 0.0. 0.0 sd Union[Float, ArrayLike] The standard deviation of the normal distribution. Defaults to 1.0. 1.0 lower_tail bool If True (default), returns the cumulative distribution function (CDF) from negative infinity up to x. Otherwise, returns the CDF from x to positive infinity. True log_prob bool If True, returns the log-probability instead of the probability. False dtype jnp.dtype The dtype of the output. Default is jnp.float32 . <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function evaluated at point(s) x. Examples: >>> import jax.numpy as jnp >>> x = jnp . array ([ 0.5 , 1.0 , - 1.5 ]) >>> dnorm ( x ) Array ([ 0.35206532 , 0.24197075 , 0.12951761 ], dtype = float32 )","title":"dnorm()"},{"location":"api/distribution/normal/#stamox.distribution.rnorm","text":"Generates random variables from a normal distribution. Parameters: Name Type Description Default key PRNGKeyArray A KeyArray object used to generate the random numbers. required sample_shape Optional[Sequence[int]] An optional tuple of integers specifying the shape of the None mean Union[Float, ArrayLike] The mean of the normal distribution. Defaults to 0.0. 0.0 sd Union[Float, ArrayLike] The standard deviation of the normal distribution. Defaults to 1.0. 1.0 lower_tail Bool If True (default), returns the cumulative distribution function (CDF) from negative infinity up to x. Otherwise, returns the CDF from x to positive infinity. True log_prob Bool If True, returns the log-probability instead of the probability. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random samples from a normal distribution. Examples: >>> import jax.numpy as jnp >>> from jax import random >>> key = random . PRNGKey ( 0 ) >>> rnorm ( key , sample_shape = ( 3 , 2 )) Array ([[ 0.18784384 , - 1.2833426 ], [ 0.6494181 , 1.2490594 ], [ 0.24447003 , - 0.11744965 ]], dtype = float32 )","title":"rnorm()"},{"location":"api/distribution/pareto/","text":"Pareto Distribution \u00a4 stamox . distribution . ppareto ( q : Union [ Float , ArrayLike ], scale : Union [ Float , ArrayLike ], alpha : Union [ Float , ArrayLike ], lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the cumulative distribution function of the Pareto distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required scale Union[Float, ArrayLike] The scale parameter of the Pareto distribution. required alpha Union[Float, ArrayLike] The shape parameter of the Pareto distribution. required lower_tail bool Whether to compute the lower tail of the CDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function of the Pareto distribution evaluated at q . Examples: >>> ppareto ( 0.2 , 0.1 , 2.0 ) Array ([ 0.75 ], dtype = float32 , weak_type = True ) stamox . distribution . qpareto ( p : Union [ Float , ArrayLike ], scale : Union [ Float , ArrayLike ], alpha : Union [ Float , ArrayLike ], lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile function of the Pareto distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] Quantiles to compute. required scale Union[Float, ArrayLike] Scale parameter of the Pareto distribution. required alpha Union[Float, ArrayLike] Shape parameter of the Pareto distribution. required lower_tail Bool Whether to compute the lower tail probability. Defaults to True. True log_prob Bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the Pareto distribution. Examples: >>> qpareto ( 0.2 , 0.1 , 2.0 ) Array ([ 0.1118034 ], dtype = float32 , weak_type = True ) stamox . distribution . dpareto ( x : Union [ Float , ArrayLike ], scale : Union [ Float , ArrayLike ], alpha : Union [ Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the density of the Pareto distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the density. required scale Union[Float, ArrayLike] The scale parameter of the Pareto distribution. required alpha Union[Float, ArrayLike] The shape parameter of the Pareto distribution. required lower_tail bool Whether to compute the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The density of the Pareto distribution evaluated at x . Examples: >>> dpareto ( 0.2 , 0.1 , 2.0 ) Array ([ 2.4999998 ], dtype = float32 , weak_type = True ) stamox . distribution . rpareto ( key : PRNGKeyArray , sample_shape : Optional [ Sequence [ int ]] = None , scale : Union [ Float , ArrayLike ] = None , alpha : Union [ Float , ArrayLike ] = None , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generate random variable following a Pareto distribution. Parameters: Name Type Description Default key KeyArray A random number generator key. required sample_shape Optional[Shape] The shape of the samples to be drawn. Defaults to None. None scale Union[Float, ArrayLike] The scale parameter of the Pareto distribution. None alpha Union[Float, ArrayLike] The shape parameter of the Pareto distribution. None lower_tail Bool Whether to calculate the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike random variable following a Pareto distribution. Examples: >>> rpareto ( jax . random . PRNGKey ( 0 ), sample_shape = ( 2 , 3 ), scale = 0.1 , alpha = 2.0 ) Array ([[ 0.15330292 , 0.10539087 , 0.19686179 ], [ 0.30740616 , 0.15743963 , 0.13524036 ]], dtype = float32 )","title":"Pareto Distribution"},{"location":"api/distribution/pareto/#pareto-distribution","text":"","title":"Pareto Distribution"},{"location":"api/distribution/pareto/#stamox.distribution.ppareto","text":"Computes the cumulative distribution function of the Pareto distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required scale Union[Float, ArrayLike] The scale parameter of the Pareto distribution. required alpha Union[Float, ArrayLike] The shape parameter of the Pareto distribution. required lower_tail bool Whether to compute the lower tail of the CDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function of the Pareto distribution evaluated at q . Examples: >>> ppareto ( 0.2 , 0.1 , 2.0 ) Array ([ 0.75 ], dtype = float32 , weak_type = True )","title":"ppareto()"},{"location":"api/distribution/pareto/#stamox.distribution.qpareto","text":"Computes the quantile function of the Pareto distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] Quantiles to compute. required scale Union[Float, ArrayLike] Scale parameter of the Pareto distribution. required alpha Union[Float, ArrayLike] Shape parameter of the Pareto distribution. required lower_tail Bool Whether to compute the lower tail probability. Defaults to True. True log_prob Bool Whether to compute the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the Pareto distribution. Examples: >>> qpareto ( 0.2 , 0.1 , 2.0 ) Array ([ 0.1118034 ], dtype = float32 , weak_type = True )","title":"qpareto()"},{"location":"api/distribution/pareto/#stamox.distribution.dpareto","text":"Computes the density of the Pareto distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the density. required scale Union[Float, ArrayLike] The scale parameter of the Pareto distribution. required alpha Union[Float, ArrayLike] The shape parameter of the Pareto distribution. required lower_tail bool Whether to compute the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The density of the Pareto distribution evaluated at x . Examples: >>> dpareto ( 0.2 , 0.1 , 2.0 ) Array ([ 2.4999998 ], dtype = float32 , weak_type = True )","title":"dpareto()"},{"location":"api/distribution/pareto/#stamox.distribution.rpareto","text":"Generate random variable following a Pareto distribution. Parameters: Name Type Description Default key KeyArray A random number generator key. required sample_shape Optional[Shape] The shape of the samples to be drawn. Defaults to None. None scale Union[Float, ArrayLike] The scale parameter of the Pareto distribution. None alpha Union[Float, ArrayLike] The shape parameter of the Pareto distribution. None lower_tail Bool Whether to calculate the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike random variable following a Pareto distribution. Examples: >>> rpareto ( jax . random . PRNGKey ( 0 ), sample_shape = ( 2 , 3 ), scale = 0.1 , alpha = 2.0 ) Array ([[ 0.15330292 , 0.10539087 , 0.19686179 ], [ 0.30740616 , 0.15743963 , 0.13524036 ]], dtype = float32 )","title":"rpareto()"},{"location":"api/distribution/poisson/","text":"Poisson Distribution \u00a4 stamox . distribution . ppoisson ( q : Union [ Float , ArrayLike ], rate : Union [ Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the cumulative distribution function of the Poisson distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. required lower_tail bool Whether to compute the lower tail of the CDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function of the Poisson distribution evaluated at q . stamox . distribution . qpoisson ( p : Union [ Float , ArrayLike ], rate : Union [ Float , ArrayLike ], lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . int32 '>) -> ArrayLike \u00a4 Computes the quantile function of the Poisson distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] The probability at which to evaluate the quantile function. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. required lower_tail bool Whether to compute the lower tail of the quantile function. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.int32. <class 'jax.numpy.int32'> Returns: Type Description ArrayLike The quantile function of the Poisson distribution evaluated at p . stamox . distribution . dpoisson ( x : Union [ Float , ArrayLike ], rate : Union [ Float , ArrayLike ], lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the probability density function of the Poisson distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the PDF. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. required lower_tail bool Whether to compute the lower tail of the PDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function of the Poisson distribution evaluated at x . stamox . distribution . rpoisson ( key : PRNGKeyArray , sample_shape : Optional [ Sequence [ int ]] = None , rate : Union [ Float , ArrayLike ] = None , lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . int32 '>) -> ArrayLike \u00a4 Generates samples from the Poisson distribution. Parameters: Name Type Description Default key KeyArray Random number generator state used for random sampling. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. None sample_shape Optional[Shape] Shape of the output array. Defaults to None. None lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.int32. <class 'jax.numpy.int32'> Returns: Type Description ArrayLike Samples from the Poisson distribution.","title":"Poisson Distribution"},{"location":"api/distribution/poisson/#poisson-distribution","text":"","title":"Poisson Distribution"},{"location":"api/distribution/poisson/#stamox.distribution.ppoisson","text":"Computes the cumulative distribution function of the Poisson distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. required lower_tail bool Whether to compute the lower tail of the CDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function of the Poisson distribution evaluated at q .","title":"ppoisson()"},{"location":"api/distribution/poisson/#stamox.distribution.qpoisson","text":"Computes the quantile function of the Poisson distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] The probability at which to evaluate the quantile function. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. required lower_tail bool Whether to compute the lower tail of the quantile function. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.int32. <class 'jax.numpy.int32'> Returns: Type Description ArrayLike The quantile function of the Poisson distribution evaluated at p .","title":"qpoisson()"},{"location":"api/distribution/poisson/#stamox.distribution.dpoisson","text":"Computes the probability density function of the Poisson distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value at which to evaluate the PDF. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. required lower_tail bool Whether to compute the lower tail of the PDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function of the Poisson distribution evaluated at x .","title":"dpoisson()"},{"location":"api/distribution/poisson/#stamox.distribution.rpoisson","text":"Generates samples from the Poisson distribution. Parameters: Name Type Description Default key KeyArray Random number generator state used for random sampling. required rate Union[Float, ArrayLike] The rate parameter of the Poisson distribution. None sample_shape Optional[Shape] Shape of the output array. Defaults to None. None lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.int32. <class 'jax.numpy.int32'> Returns: Type Description ArrayLike Samples from the Poisson distribution.","title":"rpoisson()"},{"location":"api/distribution/t/","text":"Student T Distribution \u00a4 stamox . distribution . pt ( q : Union [ Float , ArrayLike ], df : Union [ Int , Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the probability of a given value for Student T distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value to calculate the probability of. required df Union[Int, Float, ArrayLike] The degrees of freedom of the distribution. required loc Union[Float, ArrayLike] The location parameter of the distribution. 0.0 scale Union[Float, ArrayLike] The scale parameter of the distribution. 1.0 lower_tail bool Whether to calculate the lower tail probability or not. True log_prob bool Whether to return the log probability or not. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cdf value of the given value for Student T distribution. Examples: >>> pt ( 1.0 , 1.0 ) Array ([ 0.74999994 ], dtype = float32 , weak_type = True ) stamox . distribution . qt ( p : Union [ Float , ArrayLike ], df : Union [ Int , Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail = True , log_prob = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the quantile of Student T distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] A float or array-like object representing the quantile to be calculated. required df Union[Int, Float, ArrayLike] An int, float, or array-like object representing the degrees of freedom. required loc Union[Float, ArrayLike] An optional float or array-like object representing the location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] An optional float or array-like object representing the scale parameter. Defaults to 1.0. 1.0 lower_tail A boolean indicating whether the lower tail should be used. Defaults to True. True log_prob A boolean indicating whether the probability should be logged. Defaults to False. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantile of the Student T distribution. Examples: >>> qt ( 0.5 , 1.0 ) Array ([ 0. ], dtype = float32 , weak_type = True ) stamox . distribution . dt ( x : Union [ Float , ArrayLike ], df : Union [ Int , Float , ArrayLike ], loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the probability density function of a Student's t-distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] A float or array-like object representing the values at which to evaluate required df Union[Int, Float, ArrayLike] Degrees of freedom for the Student's t-distribution. required loc Union[Float, ArrayLike] Location parameter for the Student's t-distribution. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] Scale parameter for the Student's t-distribution. Defaults to 1.0. 1.0 lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function evaluated at x . Examples: >>> dt ( 1.0 , 1.0 ) Array ([ 0.1591549 ], dtype = float32 , weak_type = True ) stamox . distribution . rt ( key : PRNGKeyArray , sample_shape : Optional [ Sequence [ int ]] = None , df : Union [ Int , Float , ArrayLike ] = None , loc : Union [ Float , ArrayLike ] = 0.0 , scale : Union [ Float , ArrayLike ] = 1.0 , lower_tail : bool = True , log_prob : bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random numbers from a t-distribution. Parameters: Name Type Description Default key PRNGKeyArray Type of the random number generator. required sample_shape Optional[Sequence[int]] Shape of the output array. None df Union[Int, Float, ArrayLike] Degrees of freedom. None loc Union[Float, ArrayLike] Location parameter. 0.0 scale Union[Float, ArrayLike] Scale parameter. 1.0 lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random numbers from a t-distribution. Examples: >>> rt ( key , ( 2 , 3 ), 1.0 ) Array ([[ 1.9982358e+02 , 2.3699088e-01 , 6.6509140e-01 ], [ 5.3681795e-02 , 3.3967651e+01 , 6.8611817e+00 ]], dtype = float32 )","title":"Student T Distribution"},{"location":"api/distribution/t/#student-t-distribution","text":"","title":"Student T Distribution"},{"location":"api/distribution/t/#stamox.distribution.pt","text":"Calculates the probability of a given value for Student T distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value to calculate the probability of. required df Union[Int, Float, ArrayLike] The degrees of freedom of the distribution. required loc Union[Float, ArrayLike] The location parameter of the distribution. 0.0 scale Union[Float, ArrayLike] The scale parameter of the distribution. 1.0 lower_tail bool Whether to calculate the lower tail probability or not. True log_prob bool Whether to return the log probability or not. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cdf value of the given value for Student T distribution. Examples: >>> pt ( 1.0 , 1.0 ) Array ([ 0.74999994 ], dtype = float32 , weak_type = True )","title":"pt()"},{"location":"api/distribution/t/#stamox.distribution.qt","text":"Calculates the quantile of Student T distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] A float or array-like object representing the quantile to be calculated. required df Union[Int, Float, ArrayLike] An int, float, or array-like object representing the degrees of freedom. required loc Union[Float, ArrayLike] An optional float or array-like object representing the location parameter. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] An optional float or array-like object representing the scale parameter. Defaults to 1.0. 1.0 lower_tail A boolean indicating whether the lower tail should be used. Defaults to True. True log_prob A boolean indicating whether the probability should be logged. Defaults to False. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantile of the Student T distribution. Examples: >>> qt ( 0.5 , 1.0 ) Array ([ 0. ], dtype = float32 , weak_type = True )","title":"qt()"},{"location":"api/distribution/t/#stamox.distribution.dt","text":"Calculates the probability density function of a Student's t-distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] A float or array-like object representing the values at which to evaluate required df Union[Int, Float, ArrayLike] Degrees of freedom for the Student's t-distribution. required loc Union[Float, ArrayLike] Location parameter for the Student's t-distribution. Defaults to 0.0. 0.0 scale Union[Float, ArrayLike] Scale parameter for the Student's t-distribution. Defaults to 1.0. 1.0 lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density function evaluated at x . Examples: >>> dt ( 1.0 , 1.0 ) Array ([ 0.1591549 ], dtype = float32 , weak_type = True )","title":"dt()"},{"location":"api/distribution/t/#stamox.distribution.rt","text":"Generates random numbers from a t-distribution. Parameters: Name Type Description Default key PRNGKeyArray Type of the random number generator. required sample_shape Optional[Sequence[int]] Shape of the output array. None df Union[Int, Float, ArrayLike] Degrees of freedom. None loc Union[Float, ArrayLike] Location parameter. 0.0 scale Union[Float, ArrayLike] Scale parameter. 1.0 lower_tail bool Whether to return the lower tail probability. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike Random numbers from a t-distribution. Examples: >>> rt ( key , ( 2 , 3 ), 1.0 ) Array ([[ 1.9982358e+02 , 2.3699088e-01 , 6.6509140e-01 ], [ 5.3681795e-02 , 3.3967651e+01 , 6.8611817e+00 ]], dtype = float32 )","title":"rt()"},{"location":"api/distribution/uniform/","text":"Uniform Distribution \u00a4 stamox . distribution . punif ( q : Union [ Float , ArrayLike ], mini : Union [ Float , ArrayLike ] = 0.0 , maxi : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the cumulative distribution function of the uniform distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required mini Union[Float, ArrayLike] The minimum value of the uniform distribution. Defaults to 0.0. 0.0 maxi Union[Float, ArrayLike] The maximum value of the uniform distribution. Defaults to 1.0. 1.0 lower_tail bool Whether to compute the lower tail of the CDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function of the uniform distribution evaluated at q . Examples: >>> punif ( 0.5 ) Array ([ 0.5 ], dtype = float32 , weak_type = True ) stamox . distribution . qunif ( p : Union [ Float , ArrayLike ], mini : Union [ Float , ArrayLike ] = 0.0 , maxi : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the quantile function of a uniform distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] Quantiles to compute. required mini Union[Float, Array] Lower bound of the uniform distribution. Defaults to 0.0. 0.0 maxi Union[Float, Array] Upper bound of the uniform distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to compute the lower tail or not. Defaults to True. True log_prob Bool Whether to compute the log probability or not. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the uniform distribution. Examples: >>> qunif ( 0.5 ) Array ([ 0.5 ], dtype = float32 , weak_type = True ) stamox . distribution . dunif ( x : Union [ Float , ArrayLike ], mini : Union [ Float , ArrayLike ] = 0.0 , maxi : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Calculates the probability density function of a uniform distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value or array of values for which to calculate the probability density. required mini Union[Float, Array] The lower bound of the uniform distribution. Defaults to 0.0. 0.0 maxi Union[Float, Array] The upper bound of the uniform distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to calculate the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density of the given value(s). Examples: >>> dunif ( 0.5 ) Array ([ 1. ], dtype = float32 , weak_type = True ) stamox . distribution . runif ( key : Union [ jax . Array , jax . _src . prng . PRNGKeyArray ], sample_shape : Optional [ Sequence [ int ]] = None , mini : Union [ Float , ArrayLike ] = 0.0 , maxi : Union [ Float , ArrayLike ] = 1.0 , lower_tail : Bool = True , log_prob : Bool = False , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Generates random numbers from a uniform distribution. Parameters: Name Type Description Default key Union[jax.Array, jax._src.prng.PRNGKeyArray] A PRNGKey to use for generating the random numbers. required sample_shape Optional[Sequence[int]] The shape of the output array. None mini Union[Float, ArrayLike] The minimum value of the uniform distribution. 0.0 maxi Union[Float, ArrayLike] The maximum value of the uniform distribution. 1.0 lower_tail Bool Whether to generate values from the lower tail of the distribution. True log_prob Bool Whether to return the log probability of the generated values. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array of random numbers from a uniform distribution. Examples: >>> runif ( key , sample_shape = ( 2 , 3 )) Array ([[ 0.57450044 , 0.09968603 , 0.7419659 ], [ 0.8941783 , 0.59656656 , 0.45325184 ]], dtype = float32 )","title":"Uniform Distribution"},{"location":"api/distribution/uniform/#uniform-distribution","text":"","title":"Uniform Distribution"},{"location":"api/distribution/uniform/#stamox.distribution.punif","text":"Computes the cumulative distribution function of the uniform distribution. Parameters: Name Type Description Default q Union[Float, ArrayLike] The value at which to evaluate the CDF. required mini Union[Float, ArrayLike] The minimum value of the uniform distribution. Defaults to 0.0. 0.0 maxi Union[Float, ArrayLike] The maximum value of the uniform distribution. Defaults to 1.0. 1.0 lower_tail bool Whether to compute the lower tail of the CDF. Defaults to True. True log_prob bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The cumulative distribution function of the uniform distribution evaluated at q . Examples: >>> punif ( 0.5 ) Array ([ 0.5 ], dtype = float32 , weak_type = True )","title":"punif()"},{"location":"api/distribution/uniform/#stamox.distribution.qunif","text":"Computes the quantile function of a uniform distribution. Parameters: Name Type Description Default p Union[Float, ArrayLike] Quantiles to compute. required mini Union[Float, Array] Lower bound of the uniform distribution. Defaults to 0.0. 0.0 maxi Union[Float, Array] Upper bound of the uniform distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to compute the lower tail or not. Defaults to True. True log_prob Bool Whether to compute the log probability or not. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The quantiles of the uniform distribution. Examples: >>> qunif ( 0.5 ) Array ([ 0.5 ], dtype = float32 , weak_type = True )","title":"qunif()"},{"location":"api/distribution/uniform/#stamox.distribution.dunif","text":"Calculates the probability density function of a uniform distribution. Parameters: Name Type Description Default x Union[Float, ArrayLike] The value or array of values for which to calculate the probability density. required mini Union[Float, Array] The lower bound of the uniform distribution. Defaults to 0.0. 0.0 maxi Union[Float, Array] The upper bound of the uniform distribution. Defaults to 1.0. 1.0 lower_tail Bool Whether to calculate the lower tail probability. Defaults to True. True log_prob Bool Whether to return the log probability. Defaults to False. False dtype jnp.dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike The probability density of the given value(s). Examples: >>> dunif ( 0.5 ) Array ([ 1. ], dtype = float32 , weak_type = True )","title":"dunif()"},{"location":"api/distribution/uniform/#stamox.distribution.runif","text":"Generates random numbers from a uniform distribution. Parameters: Name Type Description Default key Union[jax.Array, jax._src.prng.PRNGKeyArray] A PRNGKey to use for generating the random numbers. required sample_shape Optional[Sequence[int]] The shape of the output array. None mini Union[Float, ArrayLike] The minimum value of the uniform distribution. 0.0 maxi Union[Float, ArrayLike] The maximum value of the uniform distribution. 1.0 lower_tail Bool Whether to generate values from the lower tail of the distribution. True log_prob Bool Whether to return the log probability of the generated values. False dtype The dtype of the output. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description ArrayLike An array of random numbers from a uniform distribution. Examples: >>> runif ( key , sample_shape = ( 2 , 3 )) Array ([[ 0.57450044 , 0.09968603 , 0.7419659 ], [ 0.8941783 , 0.59656656 , 0.45325184 ]], dtype = float32 )","title":"runif()"},{"location":"api/hypothesis/bartlett/","text":"Bartlett Test \u00a4 stamox . hypothesis . bartlett_test_fun ( * samples : Sequence [ ArrayLike ]) -> BartlettTest \u00a4 Calculates the Bartlett test statistic for multiple samples. Parameters: Name Type Description Default *samples Sequence[ArrayLike] A sequence of 1-D arrays, each containing a sample of scores. All samples must have the same length. () Returns: Type Description BartlettTest The Bartlett Test object. Examples: >>> bartlett_test ([ 1 , 2 , 3 ], [ 1 , 2 , 3 ]) BartlettTest ( statistic = 0.0 , parameters = 1 , p_value = 1.0 ) stamox.hypothesis.BartlettTest \u00a4 Class for performing a Bartlett's test. This class is used to perform a Bartlett's test, which tests the null hypothesis that all input samples are from populations with equal variances. Attributes: Name Type Description statistic float The test statistic. parameters int The degrees of freedom. p_value float The p-value of the test.","title":"Bartlett Test"},{"location":"api/hypothesis/bartlett/#bartlett-test","text":"","title":"Bartlett Test"},{"location":"api/hypothesis/bartlett/#stamox.hypothesis.bartlett_test_fun","text":"Calculates the Bartlett test statistic for multiple samples. Parameters: Name Type Description Default *samples Sequence[ArrayLike] A sequence of 1-D arrays, each containing a sample of scores. All samples must have the same length. () Returns: Type Description BartlettTest The Bartlett Test object. Examples: >>> bartlett_test ([ 1 , 2 , 3 ], [ 1 , 2 , 3 ]) BartlettTest ( statistic = 0.0 , parameters = 1 , p_value = 1.0 )","title":"bartlett_test_fun()"},{"location":"api/hypothesis/bartlett/#stamox.hypothesis.BartlettTest","text":"Class for performing a Bartlett's test. This class is used to perform a Bartlett's test, which tests the null hypothesis that all input samples are from populations with equal variances. Attributes: Name Type Description statistic float The test statistic. parameters int The degrees of freedom. p_value float The p-value of the test.","title":"BartlettTest"},{"location":"api/hypothesis/durbin_watson/","text":"Durbin-Watson Test \u00a4 stamox . hypothesis . durbin_watson_test ( resids : ArrayLike , axis : int = 0 ) \u00a4 Computes the Durbin-Watson statistic for a given array of residuals. Parameters: Name Type Description Default resids array An array of residuals. required axis int The axis along which to compute the statistic. Defaults to 0. 0 Returns: Type Description DurbinWatsonTest The Durbin-Watson Test object. Examples: >>> import jax.numpy as jnp >>> from stamox.hypothesis import durbin_watson_test >>> resids = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> durbin_watson_test ( resids ) Durbin - Waston Test ( statistic = 0.0 , parameters = None , p_value = None ) stamox.hypothesis.DurbinWatsonTest \u00a4 Class for performing the Durbin-Watson Test. This class is a subclass of HypoTest and provides methods to perform the Durbin-Waston Test. Attributes: Name Type Description statistic float The test statistic. parameters tuple The parameters of the test. p_value float The p-value of the test.","title":"Durbin-Watson Test"},{"location":"api/hypothesis/durbin_watson/#durbin-watson-test","text":"","title":"Durbin-Watson Test"},{"location":"api/hypothesis/durbin_watson/#stamox.hypothesis.durbin_watson_test","text":"Computes the Durbin-Watson statistic for a given array of residuals. Parameters: Name Type Description Default resids array An array of residuals. required axis int The axis along which to compute the statistic. Defaults to 0. 0 Returns: Type Description DurbinWatsonTest The Durbin-Watson Test object. Examples: >>> import jax.numpy as jnp >>> from stamox.hypothesis import durbin_watson_test >>> resids = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> durbin_watson_test ( resids ) Durbin - Waston Test ( statistic = 0.0 , parameters = None , p_value = None )","title":"durbin_watson_test()"},{"location":"api/hypothesis/durbin_watson/#stamox.hypothesis.DurbinWatsonTest","text":"Class for performing the Durbin-Watson Test. This class is a subclass of HypoTest and provides methods to perform the Durbin-Waston Test. Attributes: Name Type Description statistic float The test statistic. parameters tuple The parameters of the test. p_value float The p-value of the test.","title":"DurbinWatsonTest"},{"location":"api/hypothesis/friedman/","text":"Friedman Test \u00a4 stamox . hypothesis . friedman_test_fun ( * samples : Sequence [ ArrayLike ]) -> FriedmanTest \u00a4 Computes the Friedman statistic for a set of samples. Parameters: Name Type Description Default *samples Sequence[ArrayLike] A sequence of samples, each sample being a sequence of observations. () Returns: Type Description FriedmanTest The Friedman Test object. stamox.hypothesis.FriedmanTest \u00a4 Class for performing Friedman Rank Sum Test. This class is a subclass of HypoTest and provides methods to perform the Friedman Rank Sum Test. Attributes: Name Type Description statistic float The test statistic. parameters tuple Parameters of the distribution. p_value float The p-value of the test.","title":"Friedman Test"},{"location":"api/hypothesis/friedman/#friedman-test","text":"","title":"Friedman Test"},{"location":"api/hypothesis/friedman/#stamox.hypothesis.friedman_test_fun","text":"Computes the Friedman statistic for a set of samples. Parameters: Name Type Description Default *samples Sequence[ArrayLike] A sequence of samples, each sample being a sequence of observations. () Returns: Type Description FriedmanTest The Friedman Test object.","title":"friedman_test_fun()"},{"location":"api/hypothesis/friedman/#stamox.hypothesis.FriedmanTest","text":"Class for performing Friedman Rank Sum Test. This class is a subclass of HypoTest and provides methods to perform the Friedman Rank Sum Test. Attributes: Name Type Description statistic float The test statistic. parameters tuple Parameters of the distribution. p_value float The p-value of the test.","title":"FriedmanTest"},{"location":"api/hypothesis/shapiro/","text":"Shapiro Test \u00a4 stamox . hypothesis . shapiro_wilk_test_fun ( x : ArrayLike ) -> ShapiroWilkTest \u00a4 Computes the Shapiro-Wilk test for normality. Parameters: Name Type Description Default x ArrayLike The data to be tested. required Returns: Type Description ShapiroWilkTest The Shapiro-Wilk Test object. Examples: >>> import jax.numpy as jnp >>> from stamox.hypothesis import shapiro_wilk_test >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> shapiro_wilk_test ( x ) Shapiro - Wilk Test ( statistic = 0.0 , p_value = None ) stamox.hypothesis.ShapiroWilkTest \u00a4 Class to perform the Shapiro-Wilk test. This class is a subclass of HypoTest and provides methods to perform the Shapiro-Wilk test. Attributes: Name Type Description statistic float The test statistic. p_value float The p-value of the test.","title":"Shapiro Test"},{"location":"api/hypothesis/shapiro/#shapiro-test","text":"","title":"Shapiro Test"},{"location":"api/hypothesis/shapiro/#stamox.hypothesis.shapiro_wilk_test_fun","text":"Computes the Shapiro-Wilk test for normality. Parameters: Name Type Description Default x ArrayLike The data to be tested. required Returns: Type Description ShapiroWilkTest The Shapiro-Wilk Test object. Examples: >>> import jax.numpy as jnp >>> from stamox.hypothesis import shapiro_wilk_test >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ]) >>> shapiro_wilk_test ( x ) Shapiro - Wilk Test ( statistic = 0.0 , p_value = None )","title":"shapiro_wilk_test_fun()"},{"location":"api/hypothesis/shapiro/#stamox.hypothesis.ShapiroWilkTest","text":"Class to perform the Shapiro-Wilk test. This class is a subclass of HypoTest and provides methods to perform the Shapiro-Wilk test. Attributes: Name Type Description statistic float The test statistic. p_value float The p-value of the test.","title":"ShapiroWilkTest"},{"location":"api/pipe/pipe/","text":"Make A Function That Can Be Piped \u00a4 stamox . core . pipe . make_pipe ( func : Optional [ Callable [ ~ P , ~ T ]] = None , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Makes a Function Pipeable. Parameters: Name Type Description Default func Callable Function or Callable Class. None name str Name of the Function. Defaults to \"PipeableFunc\". None kwargs optional Additional keyword arguments. required Returns: Type Description Callable The wrapped function. Examples: >>> @make_pipe ... def add ( x ): ... return x + 1 >>> h = add >> add >> add >>> h ( 1 ) 4 stamox . core . pipe . make_partial_pipe ( func : Optional [ Callable [ ~ P , ~ T ]] = None , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Makes a Partial Function Pipe. Parameters: Name Type Description Default func Callable Function or Callable Class. None name str Name of the Function. Defaults to \"PipeableFunc\". None kwargs dict Keyword arguments for the function. required Returns: Type Description Callable A partial function pipe. Examples: >>> @make_partial_pipe ... def add ( x , y ): ... return x + y >>> h = add ( y = 1 ) >> add ( y = 2 ) >> add ( y = 3 ) >>> h ( 1 ) 7","title":"Make A Function That Can Be Piped"},{"location":"api/pipe/pipe/#make-a-function-that-can-be-piped","text":"","title":"Make A Function That Can Be Piped"},{"location":"api/pipe/pipe/#stamox.core.pipe.make_pipe","text":"Makes a Function Pipeable. Parameters: Name Type Description Default func Callable Function or Callable Class. None name str Name of the Function. Defaults to \"PipeableFunc\". None kwargs optional Additional keyword arguments. required Returns: Type Description Callable The wrapped function. Examples: >>> @make_pipe ... def add ( x ): ... return x + 1 >>> h = add >> add >> add >>> h ( 1 ) 4","title":"make_pipe()"},{"location":"api/pipe/pipe/#stamox.core.pipe.make_partial_pipe","text":"Makes a Partial Function Pipe. Parameters: Name Type Description Default func Callable Function or Callable Class. None name str Name of the Function. Defaults to \"PipeableFunc\". None kwargs dict Keyword arguments for the function. required Returns: Type Description Callable A partial function pipe. Examples: >>> @make_partial_pipe ... def add ( x , y ): ... return x + y >>> h = add ( y = 1 ) >> add ( y = 2 ) >> add ( y = 3 ) >>> h ( 1 ) 7","title":"make_partial_pipe()"},{"location":"api/pipe/pipe_jit/","text":"Make a Pipeable Function Jitted \u00a4 stamox . core . jit . pipe_jit ( func : Callable [ ~ P , ~ T ] = None , * , donate : str = 'none' , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Creates a pipeable jitted functional from a given function. Parameters: Name Type Description Default func Callable[~P, ~T] The function to create the functional from. None donate str Optional donation string. 'none' name str Optional name for the functional. None Returns: Type Description Callable[~P, ~T] A callable that creates a functional from the given function. Examples: >>> from stamox.core import pipe_jit >>> f = lambda x : x + 1 >>> f = pipe_jit ( f ) >>> g = f >> f >> f >>> g ( 1 ) 4 stamox . core . jit . partial_pipe_jit ( func : Callable [ ~ P , ~ T ] = None , * , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Creates a partial pipeable jitted functional from a given function. Parameters: Name Type Description Default func Callable[P, T] description None name str description . Defaults to None. None Returns: Type Description Callable[~P, ~T] a partial pipeable jitted functional from a given function. Examples: >>> from stamox.core import partial_pipe_jit >>> f = lambda x , y : x + y >>> f = partial_pipe_jit ( f ) >>> g = f ( y = 1 ) >> f ( y = 2 ) >> f ( y = 3 ) >>> g ( 1 ) 7","title":"Make a Pipeable Function Jitted"},{"location":"api/pipe/pipe_jit/#make-a-pipeable-function-jitted","text":"","title":"Make a Pipeable Function Jitted"},{"location":"api/pipe/pipe_jit/#stamox.core.jit.pipe_jit","text":"Creates a pipeable jitted functional from a given function. Parameters: Name Type Description Default func Callable[~P, ~T] The function to create the functional from. None donate str Optional donation string. 'none' name str Optional name for the functional. None Returns: Type Description Callable[~P, ~T] A callable that creates a functional from the given function. Examples: >>> from stamox.core import pipe_jit >>> f = lambda x : x + 1 >>> f = pipe_jit ( f ) >>> g = f >> f >> f >>> g ( 1 ) 4","title":"pipe_jit()"},{"location":"api/pipe/pipe_jit/#stamox.core.jit.partial_pipe_jit","text":"Creates a partial pipeable jitted functional from a given function. Parameters: Name Type Description Default func Callable[P, T] description None name str description . Defaults to None. None Returns: Type Description Callable[~P, ~T] a partial pipeable jitted functional from a given function. Examples: >>> from stamox.core import partial_pipe_jit >>> f = lambda x , y : x + y >>> f = partial_pipe_jit ( f ) >>> g = f ( y = 1 ) >> f ( y = 2 ) >> f ( y = 3 ) >>> g ( 1 ) 7","title":"partial_pipe_jit()"},{"location":"api/pipe/pipe_map/","text":"Make a Pipeable Function Mapped \u00a4 stamox . core . maps . pipe_vmap ( func : Callable [ ~ P , ~ T ] = None , * , in_axes = 0 , out_axes = 0 , axis_name : Hashable = None , axis_size : int | None = None , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Creates a functional from a function with vmap. Parameters: Name Type Description Default func Callable[~P, ~T] The function to be wrapped. None in_axes The number of input axes. 0 out_axes The number of output axes. 0 axis_name Hashable The name of the axis. None axis_size int | None The size of the axis. None name str The name of the functional. If not provided, the name of the None Returns: Type Description Callable[~P, ~T] A callable that creates a functional from the given function. Examples: >>> from stamox.core import pipe_vmap >>> f = lambda x : x + 1 >>> f = pipe_vmap ( f ) >>> g = f >> f >> f >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 4 , 5 , 6 ], dtype = int32 ) stamox . core . maps . pipe_pmap ( func : Callable [ ~ P , ~ T ] = None , * , in_axes = 0 , out_axes = 0 , axis_name : Hashable = None , axis_size : int | None = None , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Creates a functional object from a given function. Parameters: Name Type Description Default func Callable[P, T] The function to be wrapped. None in_axes int The number of input axes for the function. 0 out_axes int The number of output axes for the function. 0 axis_name Hashable The name of the axis. None axis_size int | None The size of the axis. None name str The name of the functional object. None Returns: Type Description Callable[P, T] A callable object that wraps the given function. Examples: >>> from stamox.core import pipe_pmap >>> f = lambda x : x + 1 >>> f = pipe_pmap ( f ) >>> g = f >> f >> f >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 4 , 5 , 6 ], dtype = int32 ) stamox . core . maps . partial_pipe_vmap ( func : Callable [ ~ P , ~ T ] = None , * , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Partially apply a function to a vmap. Parameters: Name Type Description Default func Callable[P, T] The function to partially apply. None name str The name of the function. Defaults to None. None Returns: Type Description Callable[P, T] A partially applied function. Examples: >>> from stamox.core import partial_pipe_vmap >>> f = lambda x , y : x + y >>> f = partial_pipe_vmap ( f ) >>> g = f ( y = 1 ) >> f ( y = 2 ) >> f ( y = 3 ) >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 7 , 8 , 9 ], dtype = int32 ) stamox . core . maps . partial_pipe_pmap ( func : Callable [ ~ P , ~ T ] = None , * , name : str = None ) -> Callable [ ~ P , ~ T ] \u00a4 Partially apply a function to a pipe. Parameters: Name Type Description Default func Callable[P, T] The function to partially apply. None name str The name of the function. Defaults to None. None Returns: Type Description Callable[P, T] A partially applied function. Examples: >>> from stamox.core import partial_pipe_pmap >>> f = lambda x , y : x + y >>> f = partial_pipe_pmap ( f ) >>> g = f ( y = 1 ) >> f ( y = 2 ) >> f ( y = 3 ) >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 7 , 8 , 9 ], dtype = int32 )","title":"Make a Pipeable Function Mapped"},{"location":"api/pipe/pipe_map/#make-a-pipeable-function-mapped","text":"","title":"Make a Pipeable Function Mapped"},{"location":"api/pipe/pipe_map/#stamox.core.maps.pipe_vmap","text":"Creates a functional from a function with vmap. Parameters: Name Type Description Default func Callable[~P, ~T] The function to be wrapped. None in_axes The number of input axes. 0 out_axes The number of output axes. 0 axis_name Hashable The name of the axis. None axis_size int | None The size of the axis. None name str The name of the functional. If not provided, the name of the None Returns: Type Description Callable[~P, ~T] A callable that creates a functional from the given function. Examples: >>> from stamox.core import pipe_vmap >>> f = lambda x : x + 1 >>> f = pipe_vmap ( f ) >>> g = f >> f >> f >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 4 , 5 , 6 ], dtype = int32 )","title":"pipe_vmap()"},{"location":"api/pipe/pipe_map/#stamox.core.maps.pipe_pmap","text":"Creates a functional object from a given function. Parameters: Name Type Description Default func Callable[P, T] The function to be wrapped. None in_axes int The number of input axes for the function. 0 out_axes int The number of output axes for the function. 0 axis_name Hashable The name of the axis. None axis_size int | None The size of the axis. None name str The name of the functional object. None Returns: Type Description Callable[P, T] A callable object that wraps the given function. Examples: >>> from stamox.core import pipe_pmap >>> f = lambda x : x + 1 >>> f = pipe_pmap ( f ) >>> g = f >> f >> f >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 4 , 5 , 6 ], dtype = int32 )","title":"pipe_pmap()"},{"location":"api/pipe/pipe_map/#stamox.core.maps.partial_pipe_vmap","text":"Partially apply a function to a vmap. Parameters: Name Type Description Default func Callable[P, T] The function to partially apply. None name str The name of the function. Defaults to None. None Returns: Type Description Callable[P, T] A partially applied function. Examples: >>> from stamox.core import partial_pipe_vmap >>> f = lambda x , y : x + y >>> f = partial_pipe_vmap ( f ) >>> g = f ( y = 1 ) >> f ( y = 2 ) >> f ( y = 3 ) >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 7 , 8 , 9 ], dtype = int32 )","title":"partial_pipe_vmap()"},{"location":"api/pipe/pipe_map/#stamox.core.maps.partial_pipe_pmap","text":"Partially apply a function to a pipe. Parameters: Name Type Description Default func Callable[P, T] The function to partially apply. None name str The name of the function. Defaults to None. None Returns: Type Description Callable[P, T] A partially applied function. Examples: >>> from stamox.core import partial_pipe_pmap >>> f = lambda x , y : x + y >>> f = partial_pipe_pmap ( f ) >>> g = f ( y = 1 ) >> f ( y = 2 ) >> f ( y = 3 ) >>> g ( jnp . array ([ 1 , 2 , 3 ])) Array ([ 7 , 8 , 9 ], dtype = int32 )","title":"partial_pipe_pmap()"},{"location":"api/regression/lm/","text":"Linear Model \u00a4 stamox . regression . lm ( data : Union [ List , Tuple , pandas . core . frame . DataFrame , ArrayLike ], formula = None , subset = None , weights = None , NA_action = 'drop' , method = 'qr' , dtype = < class ' jax . numpy . float32 '>) -> OLSState \u00a4 Fits a linear model using the given data and parameters. Parameters: Name Type Description Default data Union[List, Tuple, DataFrame, ArrayLike] The data to fit the linear model with. required formula str A formula for the linear model. Defaults to None. None subset list A list of indices to use as a subset of the data. Defaults to None. None weights array-like An array of weights to apply to the data. Defaults to None. None NA_action str The action to take when encountering missing values. Defaults to \"drop\". 'drop' method str The method to use for fitting the linear model. Defaults to \"qr\". 'qr' dtype jnp.float32 The data type to use for the linear model. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description OLSState The state of the fitted linear model. Examples: >>> from stamox.regression import lm >>> import pandas as pd >>> import numpy as np >>> np . random . seed ( 42 ) >>> X = np . random . uniform ( size = ( 1000 , 3 )) >>> y = ( 3 * X [:, 0 ] + 2 * X [:, 1 ] - 7 * X [:, 2 ] + 1. ) >>> data = pd . DataFrame ( np . concatenate ([ X , y . reshape (( - 1 , 1 ))], axis = 1 ), columns = [ \"x1\" , \"x2\" , \"x3\" , \"y\" ], ) >>> res = lm ( data , \"y ~ x1 + x2 + x3\" ) >>> res . coefs Array ([ 1. , 3. , 2. , - 7. ], dtype = float32 )","title":"Linear Model"},{"location":"api/regression/lm/#linear-model","text":"","title":"Linear Model"},{"location":"api/regression/lm/#stamox.regression.lm","text":"Fits a linear model using the given data and parameters. Parameters: Name Type Description Default data Union[List, Tuple, DataFrame, ArrayLike] The data to fit the linear model with. required formula str A formula for the linear model. Defaults to None. None subset list A list of indices to use as a subset of the data. Defaults to None. None weights array-like An array of weights to apply to the data. Defaults to None. None NA_action str The action to take when encountering missing values. Defaults to \"drop\". 'drop' method str The method to use for fitting the linear model. Defaults to \"qr\". 'qr' dtype jnp.float32 The data type to use for the linear model. Defaults to jnp.float32. <class 'jax.numpy.float32'> Returns: Type Description OLSState The state of the fitted linear model. Examples: >>> from stamox.regression import lm >>> import pandas as pd >>> import numpy as np >>> np . random . seed ( 42 ) >>> X = np . random . uniform ( size = ( 1000 , 3 )) >>> y = ( 3 * X [:, 0 ] + 2 * X [:, 1 ] - 7 * X [:, 2 ] + 1. ) >>> data = pd . DataFrame ( np . concatenate ([ X , y . reshape (( - 1 , 1 ))], axis = 1 ), columns = [ \"x1\" , \"x2\" , \"x3\" , \"y\" ], ) >>> res = lm ( data , \"y ~ x1 + x2 + x3\" ) >>> res . coefs Array ([ 1. , 3. , 2. , - 7. ], dtype = float32 )","title":"lm()"},{"location":"api/sample/bootstrap/","text":"Boostrap Function \u00a4 stamox . sample . bootstrap_sample ( data : ArrayLike , num_samples : int , * , key : PRNGKeyArray = None ) -> ArrayLike \u00a4 Generates num_samples bootstrap samples from data with replacement. Parameters: Name Type Description Default data array-like The original data. required num_samples int The number of bootstrap samples to generate. required key jrandom.KeyArray A random key array. Defaults to None. None Returns: Type Description ArrayLike An array of size (num_samples, len(data)) containing the bootstrap samples. Examples: >>> import jax.numpy as jnp >>> import jax.random as jrandom >>> from stamox.sample import bootstrap_sample >>> data = jnp . arange ( 10 ) >>> key = jrandom . PRNGKey ( 0 ) >>> bootstrap_sample ( data , num_samples = 3 , key = key ) Array ([[ 9 , 1 , 6 , 2 , 9 , 3 , 9 , 9 , 4 , 5 ], [ 4 , 0 , 4 , 4 , 6 , 2 , 5 , 6 , 5 , 3 ], [ 7 , 6 , 9 , 0 , 0 , 7 , 0 , 5 , 8 , 4 ]], dtype = int32 ) stamox . sample . bootstrap ( data : ArrayLike , call : Callable [ ... , ~ ReturnValue ], num_samples : int , * , key : PRNGKeyArray = None ) -> PyTree \u00a4 Generates num_samples bootstrap samples from data with replacement, and calls call on each sample. Parameters: Name Type Description Default data array-like The original data. required call Callable[..., ReturnValue] The function to call on each bootstrap sample. required num_samples int The number of bootstrap samples to generate. required key jrandom.KeyArray A random key array. Defaults to None. None Returns: Type Description PyTree The return value of call on each bootstrap sample. Examples: >>> import jax.numpy as jnp >>> import jax.random as jrandom >>> from stamox.sample import bootstrap >>> data = jnp . arange ( 10 ) >>> bootstrap ( data , jnp . mean , 3 , key = key ) Array ([ 5.7000003 , 3.9 , 4.6 ], dtype = float32 )","title":"Boostrap Function"},{"location":"api/sample/bootstrap/#boostrap-function","text":"","title":"Boostrap Function"},{"location":"api/sample/bootstrap/#stamox.sample.bootstrap_sample","text":"Generates num_samples bootstrap samples from data with replacement. Parameters: Name Type Description Default data array-like The original data. required num_samples int The number of bootstrap samples to generate. required key jrandom.KeyArray A random key array. Defaults to None. None Returns: Type Description ArrayLike An array of size (num_samples, len(data)) containing the bootstrap samples. Examples: >>> import jax.numpy as jnp >>> import jax.random as jrandom >>> from stamox.sample import bootstrap_sample >>> data = jnp . arange ( 10 ) >>> key = jrandom . PRNGKey ( 0 ) >>> bootstrap_sample ( data , num_samples = 3 , key = key ) Array ([[ 9 , 1 , 6 , 2 , 9 , 3 , 9 , 9 , 4 , 5 ], [ 4 , 0 , 4 , 4 , 6 , 2 , 5 , 6 , 5 , 3 ], [ 7 , 6 , 9 , 0 , 0 , 7 , 0 , 5 , 8 , 4 ]], dtype = int32 )","title":"bootstrap_sample()"},{"location":"api/sample/bootstrap/#stamox.sample.bootstrap","text":"Generates num_samples bootstrap samples from data with replacement, and calls call on each sample. Parameters: Name Type Description Default data array-like The original data. required call Callable[..., ReturnValue] The function to call on each bootstrap sample. required num_samples int The number of bootstrap samples to generate. required key jrandom.KeyArray A random key array. Defaults to None. None Returns: Type Description PyTree The return value of call on each bootstrap sample. Examples: >>> import jax.numpy as jnp >>> import jax.random as jrandom >>> from stamox.sample import bootstrap >>> data = jnp . arange ( 10 ) >>> bootstrap ( data , jnp . mean , 3 , key = key ) Array ([ 5.7000003 , 3.9 , 4.6 ], dtype = float32 )","title":"bootstrap()"},{"location":"api/sample/jackknife/","text":"Jackknife Function \u00a4 stamox . sample . jackknife_sample_fun ( data : ArrayLike ) -> ArrayLike \u00a4 Generates num_samples jackknife samples from data with replacement. Parameters: Name Type Description Default data array-like The original data. required Returns: Type Description ArrayLike An array of size (len(data)-1, len(data)) containing the jackknife samples. Examples: >>> import jax.numpy as jnp >>> from stamox.sample import jackknife_sample >>> data = jnp . arange ( 3 ) >>> jackknife_sample ( data ) Array ([[ 1 , 2 ], [ 0 , 2 ], [ 0 , 1 ]], dtype = int32 ) stamox . sample . jackknife ( data : ArrayLike , call : Callable [ ... , ~ ReturnValue ]) -> PyTree \u00a4 Computes the jackknife estimate of a given data set. Parameters: Name Type Description Default data ArrayLike The data set to be analyzed. required call Callable[..., ReturnValue] A function to be applied to each sample. required Returns: Type Description PyTree The jackknife estimate of the data set. Examples: >>> import jax.numpy as jnp >>> from stamox.sample import jackknife >>> data = jnp . arange ( 3 ) >>> jackknife ( data , lambda x : jnp . mean ( x )) Array ([ 1.5 , 1. , 0.5 ], dtype = float32 )","title":"Jackknife Function"},{"location":"api/sample/jackknife/#jackknife-function","text":"","title":"Jackknife Function"},{"location":"api/sample/jackknife/#stamox.sample.jackknife_sample_fun","text":"Generates num_samples jackknife samples from data with replacement. Parameters: Name Type Description Default data array-like The original data. required Returns: Type Description ArrayLike An array of size (len(data)-1, len(data)) containing the jackknife samples. Examples: >>> import jax.numpy as jnp >>> from stamox.sample import jackknife_sample >>> data = jnp . arange ( 3 ) >>> jackknife_sample ( data ) Array ([[ 1 , 2 ], [ 0 , 2 ], [ 0 , 1 ]], dtype = int32 )","title":"jackknife_sample_fun()"},{"location":"api/sample/jackknife/#stamox.sample.jackknife","text":"Computes the jackknife estimate of a given data set. Parameters: Name Type Description Default data ArrayLike The data set to be analyzed. required call Callable[..., ReturnValue] A function to be applied to each sample. required Returns: Type Description PyTree The jackknife estimate of the data set. Examples: >>> import jax.numpy as jnp >>> from stamox.sample import jackknife >>> data = jnp . arange ( 3 ) >>> jackknife ( data , lambda x : jnp . mean ( x )) Array ([ 1.5 , 1. , 0.5 ], dtype = float32 )","title":"jackknife()"},{"location":"api/transformation/transformation/","text":"Transformations \u00a4 stamox . transformation . boxcox ( x : ArrayLike , lmbda : ArrayLike , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the Box-Cox transformation of a given array. Parameters: Name Type Description Default x ArrayLike An array-like object to be transformed. required lmbda ArrayLike An array-like object containing the lambda values for the transformation. required Returns: Type Description ArrayLike The boxcox transformed array. Examples: >>> from stamox.transformation import boxcox >>> import jax.numpy as jnp >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ], dtype = jnp . float32 ) >>> lmbda = jnp . array ([ 0 , 0 , 0 , 0 , 0 ], dtype = jnp . float32 ) >>> boxcox ( x , lmbda ) Array ([ 0. , 0.6931472 , 1.0986123 , 1.3862944 , 1.6094378 ], dtype = float32 ) stamox . transformation . z_fisher ( rho : ArrayLike , dtype = < class ' jax . numpy . float32 '>) -> ArrayLike \u00a4 Computes the Fisher z-transform of a given array. Parameters: Name Type Description Default rho ArrayLike An array-like object to be transformed. required Returns: Type Description ArrayLike The Fisher z-transformed array. Examples: >>> from stamox.transformation import z_fisher >>> import jax.numpy as jnp >>> rho = jnp . array ([ 0.1 , 0.2 , 0.3 , 0.4 , 0.5 ], dtype = jnp . float32 ) >>> z_fisher ( rho ) Array ([ 0.10033537 , 0.2013589 , 0.30469212 , 0.41073018 , 0.51991177 ], dtype = float32 )","title":"Transformations"},{"location":"api/transformation/transformation/#transformations","text":"","title":"Transformations"},{"location":"api/transformation/transformation/#stamox.transformation.boxcox","text":"Computes the Box-Cox transformation of a given array. Parameters: Name Type Description Default x ArrayLike An array-like object to be transformed. required lmbda ArrayLike An array-like object containing the lambda values for the transformation. required Returns: Type Description ArrayLike The boxcox transformed array. Examples: >>> from stamox.transformation import boxcox >>> import jax.numpy as jnp >>> x = jnp . array ([ 1 , 2 , 3 , 4 , 5 ], dtype = jnp . float32 ) >>> lmbda = jnp . array ([ 0 , 0 , 0 , 0 , 0 ], dtype = jnp . float32 ) >>> boxcox ( x , lmbda ) Array ([ 0. , 0.6931472 , 1.0986123 , 1.3862944 , 1.6094378 ], dtype = float32 )","title":"boxcox()"},{"location":"api/transformation/transformation/#stamox.transformation.z_fisher","text":"Computes the Fisher z-transform of a given array. Parameters: Name Type Description Default rho ArrayLike An array-like object to be transformed. required Returns: Type Description ArrayLike The Fisher z-transformed array. Examples: >>> from stamox.transformation import z_fisher >>> import jax.numpy as jnp >>> rho = jnp . array ([ 0.1 , 0.2 , 0.3 , 0.4 , 0.5 ], dtype = jnp . float32 ) >>> z_fisher ( rho ) Array ([ 0.10033537 , 0.2013589 , 0.30469212 , 0.41073018 , 0.51991177 ], dtype = float32 )","title":"z_fisher()"}]}